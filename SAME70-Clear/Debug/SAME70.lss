
SAME70.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001e68  00400000  00400000  00010000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00401e68  00401e68  00011e68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     00000ec4  20400000  00401e70  00020000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          000000c0  20400ec4  00402d34  00020ec4  2**2
                  ALLOC
  4 .stack        00002004  20400f84  00402df4  00020ec4  2**0
                  ALLOC
  5 .heap         00000200  20402f88  00404df8  00020ec4  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00020ec4  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00020ef2  2**0
                  CONTENTS, READONLY
  8 .debug_info   0000d77b  00000000  00000000  00020f4b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00001c49  00000000  00000000  0002e6c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00002beb  00000000  00000000  0003030f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000005a8  00000000  00000000  00032efa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000006a0  00000000  00000000  000334a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00005805  00000000  00000000  00033b42  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000760d  00000000  00000000  00039347  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00089818  00000000  00000000  00040954  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00000ee4  00000000  00000000  000ca16c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00400000 <exception_table>:
  400000:	88 2f 40 20 41 08 40 00 3d 08 40 00 3d 08 40 00     ./@ A.@.=.@.=.@.
  400010:	3d 08 40 00 3d 08 40 00 3d 08 40 00 00 00 00 00     =.@.=.@.=.@.....
	...
  40002c:	3d 08 40 00 3d 08 40 00 00 00 00 00 3d 08 40 00     =.@.=.@.....=.@.
  40003c:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  40004c:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  40005c:	3d 08 40 00 3d 08 40 00 00 00 00 00 a5 03 40 00     =.@.=.@.......@.
  40006c:	b9 03 40 00 cd 03 40 00 3d 08 40 00 3d 08 40 00     ..@...@.=.@.=.@.
  40007c:	3d 08 40 00 e1 03 40 00 f5 03 40 00 3d 08 40 00     =.@...@...@.=.@.
  40008c:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  40009c:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  4000ac:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  4000bc:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  4000cc:	3d 08 40 00 00 00 00 00 3d 08 40 00 00 00 00 00     =.@.....=.@.....
  4000dc:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  4000ec:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  4000fc:	3d 08 40 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     =.@.=.@.=.@.=.@.
  40010c:	3d 08 40 00 3d 08 40 00 00 00 00 00 00 00 00 00     =.@.=.@.........
  40011c:	00 00 00 00 3d 08 40 00 3d 08 40 00 3d 08 40 00     ....=.@.=.@.=.@.
  40012c:	3d 08 40 00 3d 08 40 00 00 00 00 00 3d 08 40 00     =.@.=.@.....=.@.
  40013c:	3d 08 40 00                                         =.@.

00400140 <__do_global_dtors_aux>:
  400140:	b510      	push	{r4, lr}
  400142:	4c05      	ldr	r4, [pc, #20]	; (400158 <__do_global_dtors_aux+0x18>)
  400144:	7823      	ldrb	r3, [r4, #0]
  400146:	b933      	cbnz	r3, 400156 <__do_global_dtors_aux+0x16>
  400148:	4b04      	ldr	r3, [pc, #16]	; (40015c <__do_global_dtors_aux+0x1c>)
  40014a:	b113      	cbz	r3, 400152 <__do_global_dtors_aux+0x12>
  40014c:	4804      	ldr	r0, [pc, #16]	; (400160 <__do_global_dtors_aux+0x20>)
  40014e:	f3af 8000 	nop.w
  400152:	2301      	movs	r3, #1
  400154:	7023      	strb	r3, [r4, #0]
  400156:	bd10      	pop	{r4, pc}
  400158:	20400ec4 	.word	0x20400ec4
  40015c:	00000000 	.word	0x00000000
  400160:	00401e70 	.word	0x00401e70

00400164 <frame_dummy>:
  400164:	4b0c      	ldr	r3, [pc, #48]	; (400198 <frame_dummy+0x34>)
  400166:	b143      	cbz	r3, 40017a <frame_dummy+0x16>
  400168:	480c      	ldr	r0, [pc, #48]	; (40019c <frame_dummy+0x38>)
  40016a:	490d      	ldr	r1, [pc, #52]	; (4001a0 <frame_dummy+0x3c>)
  40016c:	b510      	push	{r4, lr}
  40016e:	f3af 8000 	nop.w
  400172:	480c      	ldr	r0, [pc, #48]	; (4001a4 <frame_dummy+0x40>)
  400174:	6803      	ldr	r3, [r0, #0]
  400176:	b923      	cbnz	r3, 400182 <frame_dummy+0x1e>
  400178:	bd10      	pop	{r4, pc}
  40017a:	480a      	ldr	r0, [pc, #40]	; (4001a4 <frame_dummy+0x40>)
  40017c:	6803      	ldr	r3, [r0, #0]
  40017e:	b933      	cbnz	r3, 40018e <frame_dummy+0x2a>
  400180:	4770      	bx	lr
  400182:	4b09      	ldr	r3, [pc, #36]	; (4001a8 <frame_dummy+0x44>)
  400184:	2b00      	cmp	r3, #0
  400186:	d0f7      	beq.n	400178 <frame_dummy+0x14>
  400188:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  40018c:	4718      	bx	r3
  40018e:	4b06      	ldr	r3, [pc, #24]	; (4001a8 <frame_dummy+0x44>)
  400190:	2b00      	cmp	r3, #0
  400192:	d0f5      	beq.n	400180 <frame_dummy+0x1c>
  400194:	4718      	bx	r3
  400196:	bf00      	nop
  400198:	00000000 	.word	0x00000000
  40019c:	00401e70 	.word	0x00401e70
  4001a0:	20400ec8 	.word	0x20400ec8
  4001a4:	00401e70 	.word	0x00401e70
  4001a8:	00000000 	.word	0x00000000

004001ac <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
  4001ac:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
  4001ae:	4810      	ldr	r0, [pc, #64]	; (4001f0 <sysclk_init+0x44>)
  4001b0:	4b10      	ldr	r3, [pc, #64]	; (4001f4 <sysclk_init+0x48>)
  4001b2:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
  4001b4:	213e      	movs	r1, #62	; 0x3e
  4001b6:	2000      	movs	r0, #0
  4001b8:	4b0f      	ldr	r3, [pc, #60]	; (4001f8 <sysclk_init+0x4c>)
  4001ba:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
  4001bc:	4c0f      	ldr	r4, [pc, #60]	; (4001fc <sysclk_init+0x50>)
  4001be:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
  4001c0:	2800      	cmp	r0, #0
  4001c2:	d0fc      	beq.n	4001be <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
  4001c4:	4b0e      	ldr	r3, [pc, #56]	; (400200 <sysclk_init+0x54>)
  4001c6:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
  4001c8:	4a0e      	ldr	r2, [pc, #56]	; (400204 <sysclk_init+0x58>)
  4001ca:	4b0f      	ldr	r3, [pc, #60]	; (400208 <sysclk_init+0x5c>)
  4001cc:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
	return pmc_is_locked_pllack();
  4001ce:	4c0f      	ldr	r4, [pc, #60]	; (40020c <sysclk_init+0x60>)
  4001d0:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
  4001d2:	2800      	cmp	r0, #0
  4001d4:	d0fc      	beq.n	4001d0 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
  4001d6:	2002      	movs	r0, #2
  4001d8:	4b0d      	ldr	r3, [pc, #52]	; (400210 <sysclk_init+0x64>)
  4001da:	4798      	blx	r3
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
  4001dc:	2000      	movs	r0, #0
  4001de:	4b0d      	ldr	r3, [pc, #52]	; (400214 <sysclk_init+0x68>)
  4001e0:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_mck_set_division(CONFIG_SYSCLK_DIV);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}
	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
  4001e2:	4b0d      	ldr	r3, [pc, #52]	; (400218 <sysclk_init+0x6c>)
  4001e4:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
  4001e6:	4802      	ldr	r0, [pc, #8]	; (4001f0 <sysclk_init+0x44>)
  4001e8:	4b02      	ldr	r3, [pc, #8]	; (4001f4 <sysclk_init+0x48>)
  4001ea:	4798      	blx	r3
  4001ec:	bd10      	pop	{r4, pc}
  4001ee:	bf00      	nop
  4001f0:	11e1a300 	.word	0x11e1a300
  4001f4:	00400a15 	.word	0x00400a15
  4001f8:	004004a5 	.word	0x004004a5
  4001fc:	004004f9 	.word	0x004004f9
  400200:	00400509 	.word	0x00400509
  400204:	20183f01 	.word	0x20183f01
  400208:	400e0600 	.word	0x400e0600
  40020c:	00400519 	.word	0x00400519
  400210:	00400409 	.word	0x00400409
  400214:	00400441 	.word	0x00400441
  400218:	00400909 	.word	0x00400909

0040021c <pio_pull_up>:
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
  40021c:	b90a      	cbnz	r2, 400222 <pio_pull_up+0x6>
		p_pio->PIO_PUER = ul_mask;
	} else {
		p_pio->PIO_PUDR = ul_mask;
  40021e:	6601      	str	r1, [r0, #96]	; 0x60
  400220:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  400222:	6641      	str	r1, [r0, #100]	; 0x64
  400224:	4770      	bx	lr

00400226 <pio_set>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_set(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_SODR = ul_mask;
  400226:	6301      	str	r1, [r0, #48]	; 0x30
  400228:	4770      	bx	lr

0040022a <pio_clear>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Bitmask of one or more pin(s) to configure.
 */
void pio_clear(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_CODR = ul_mask;
  40022a:	6341      	str	r1, [r0, #52]	; 0x34
  40022c:	4770      	bx	lr

0040022e <pio_get>:
uint32_t pio_get(Pio *p_pio, const pio_type_t ul_type,
		const uint32_t ul_mask)
{
	uint32_t ul_reg;

	if ((ul_type == PIO_OUTPUT_0) || (ul_type == PIO_OUTPUT_1)) {
  40022e:	f021 6100 	bic.w	r1, r1, #134217728	; 0x8000000
  400232:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
  400236:	d105      	bne.n	400244 <pio_get+0x16>
		ul_reg = p_pio->PIO_ODSR;
  400238:	6b83      	ldr	r3, [r0, #56]	; 0x38
	} else {
		ul_reg = p_pio->PIO_PDSR;
	}

	if ((ul_reg & ul_mask) == 0) {
  40023a:	4213      	tst	r3, r2
		return 0;
	} else {
		return 1;
	}
}
  40023c:	bf14      	ite	ne
  40023e:	2001      	movne	r0, #1
  400240:	2000      	moveq	r0, #0
  400242:	4770      	bx	lr
		ul_reg = p_pio->PIO_PDSR;
  400244:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
  400246:	e7f8      	b.n	40023a <pio_get+0xc>

00400248 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
  400248:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  40024a:	f012 0f01 	tst.w	r2, #1
  40024e:	d10d      	bne.n	40026c <pio_set_input+0x24>
		p_pio->PIO_PUDR = ul_mask;
  400250:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
  400252:	f012 0f0a 	tst.w	r2, #10
  400256:	d00b      	beq.n	400270 <pio_set_input+0x28>
		p_pio->PIO_IFER = ul_mask;
  400258:	6201      	str	r1, [r0, #32]
	if (ul_attribute & PIO_DEGLITCH) {
  40025a:	f012 0f02 	tst.w	r2, #2
  40025e:	d109      	bne.n	400274 <pio_set_input+0x2c>
		if (ul_attribute & PIO_DEBOUNCE) {
  400260:	f012 0f08 	tst.w	r2, #8
  400264:	d008      	beq.n	400278 <pio_set_input+0x30>
			p_pio->PIO_IFSCER = ul_mask;
  400266:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
  40026a:	e005      	b.n	400278 <pio_set_input+0x30>
		p_pio->PIO_PUER = ul_mask;
  40026c:	6641      	str	r1, [r0, #100]	; 0x64
  40026e:	e7f0      	b.n	400252 <pio_set_input+0xa>
		p_pio->PIO_IFDR = ul_mask;
  400270:	6241      	str	r1, [r0, #36]	; 0x24
  400272:	e7f2      	b.n	40025a <pio_set_input+0x12>
		p_pio->PIO_IFSCDR = ul_mask;
  400274:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
	p_pio->PIO_ODR = ul_mask;
  400278:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
  40027a:	6001      	str	r1, [r0, #0]
  40027c:	4770      	bx	lr

0040027e <pio_set_output>:
{
  40027e:	b410      	push	{r4}
  400280:	9c01      	ldr	r4, [sp, #4]
	p_pio->PIO_IDR = ul_mask;
  400282:	6441      	str	r1, [r0, #68]	; 0x44
	if (ul_pull_up_enable) {
  400284:	b94c      	cbnz	r4, 40029a <pio_set_output+0x1c>
		p_pio->PIO_PUDR = ul_mask;
  400286:	6601      	str	r1, [r0, #96]	; 0x60
	if (ul_multidrive_enable) {
  400288:	b14b      	cbz	r3, 40029e <pio_set_output+0x20>
		p_pio->PIO_MDER = ul_mask;
  40028a:	6501      	str	r1, [r0, #80]	; 0x50
	if (ul_default_level) {
  40028c:	b94a      	cbnz	r2, 4002a2 <pio_set_output+0x24>
		p_pio->PIO_CODR = ul_mask;
  40028e:	6341      	str	r1, [r0, #52]	; 0x34
	p_pio->PIO_OER = ul_mask;
  400290:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
  400292:	6001      	str	r1, [r0, #0]
}
  400294:	f85d 4b04 	ldr.w	r4, [sp], #4
  400298:	4770      	bx	lr
		p_pio->PIO_PUER = ul_mask;
  40029a:	6641      	str	r1, [r0, #100]	; 0x64
  40029c:	e7f4      	b.n	400288 <pio_set_output+0xa>
		p_pio->PIO_MDDR = ul_mask;
  40029e:	6541      	str	r1, [r0, #84]	; 0x54
  4002a0:	e7f4      	b.n	40028c <pio_set_output+0xe>
		p_pio->PIO_SODR = ul_mask;
  4002a2:	6301      	str	r1, [r0, #48]	; 0x30
  4002a4:	e7f4      	b.n	400290 <pio_set_output+0x12>

004002a6 <pio_configure_interrupt>:
	if (ul_attr & PIO_IT_AIME) {
  4002a6:	f012 0f10 	tst.w	r2, #16
  4002aa:	d012      	beq.n	4002d2 <pio_configure_interrupt+0x2c>
		p_pio->PIO_AIMER = ul_mask;
  4002ac:	f8c0 10b0 	str.w	r1, [r0, #176]	; 0xb0
		if (ul_attr & PIO_IT_RE_OR_HL) {
  4002b0:	f012 0f20 	tst.w	r2, #32
  4002b4:	d007      	beq.n	4002c6 <pio_configure_interrupt+0x20>
			p_pio->PIO_REHLSR = ul_mask;
  4002b6:	f8c0 10d4 	str.w	r1, [r0, #212]	; 0xd4
		if (ul_attr & PIO_IT_EDGE) {
  4002ba:	f012 0f40 	tst.w	r2, #64	; 0x40
  4002be:	d005      	beq.n	4002cc <pio_configure_interrupt+0x26>
			p_pio->PIO_ESR = ul_mask;
  4002c0:	f8c0 10c0 	str.w	r1, [r0, #192]	; 0xc0
  4002c4:	4770      	bx	lr
			p_pio->PIO_FELLSR = ul_mask;
  4002c6:	f8c0 10d0 	str.w	r1, [r0, #208]	; 0xd0
  4002ca:	e7f6      	b.n	4002ba <pio_configure_interrupt+0x14>
			p_pio->PIO_LSR = ul_mask;
  4002cc:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
  4002d0:	4770      	bx	lr
		p_pio->PIO_AIMDR = ul_mask;
  4002d2:	f8c0 10b4 	str.w	r1, [r0, #180]	; 0xb4
  4002d6:	4770      	bx	lr

004002d8 <pio_enable_interrupt>:
	p_pio->PIO_IER = ul_mask;
  4002d8:	6401      	str	r1, [r0, #64]	; 0x40
  4002da:	4770      	bx	lr

004002dc <pio_get_interrupt_status>:
 *
 * \return The interrupt status value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
  4002dc:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
  4002de:	4770      	bx	lr

004002e0 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
  4002e0:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
  4002e2:	4770      	bx	lr

004002e4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
  4002e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  4002e8:	4604      	mov	r4, r0
  4002ea:	4688      	mov	r8, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
  4002ec:	4b0e      	ldr	r3, [pc, #56]	; (400328 <pio_handler_process+0x44>)
  4002ee:	4798      	blx	r3
  4002f0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
  4002f2:	4620      	mov	r0, r4
  4002f4:	4b0d      	ldr	r3, [pc, #52]	; (40032c <pio_handler_process+0x48>)
  4002f6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
  4002f8:	4005      	ands	r5, r0
  4002fa:	d013      	beq.n	400324 <pio_handler_process+0x40>
  4002fc:	4c0c      	ldr	r4, [pc, #48]	; (400330 <pio_handler_process+0x4c>)
  4002fe:	f104 0660 	add.w	r6, r4, #96	; 0x60
  400302:	e003      	b.n	40030c <pio_handler_process+0x28>
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
  400304:	42b4      	cmp	r4, r6
  400306:	d00d      	beq.n	400324 <pio_handler_process+0x40>
  400308:	3410      	adds	r4, #16
		while (status != 0) {
  40030a:	b15d      	cbz	r5, 400324 <pio_handler_process+0x40>
			if (gs_interrupt_sources[i].id == ul_id) {
  40030c:	6820      	ldr	r0, [r4, #0]
  40030e:	4540      	cmp	r0, r8
  400310:	d1f8      	bne.n	400304 <pio_handler_process+0x20>
				if ((status & gs_interrupt_sources[i].mask) != 0) {
  400312:	6861      	ldr	r1, [r4, #4]
  400314:	4229      	tst	r1, r5
  400316:	d0f5      	beq.n	400304 <pio_handler_process+0x20>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
  400318:	68e3      	ldr	r3, [r4, #12]
  40031a:	4798      	blx	r3
					status &= ~(gs_interrupt_sources[i].mask);
  40031c:	6863      	ldr	r3, [r4, #4]
  40031e:	ea25 0503 	bic.w	r5, r5, r3
  400322:	e7ef      	b.n	400304 <pio_handler_process+0x20>
  400324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  400328:	004002dd 	.word	0x004002dd
  40032c:	004002e1 	.word	0x004002e1
  400330:	20400ee0 	.word	0x20400ee0

00400334 <pio_handler_set>:
 *
 * \return 0 if successful, 1 if the maximum number of sources has been defined.
 */
uint32_t pio_handler_set(Pio *p_pio, uint32_t ul_id, uint32_t ul_mask,
		uint32_t ul_attr, void (*p_handler) (uint32_t, uint32_t))
{
  400334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint8_t i;
	struct s_interrupt_source *pSource;

	if (gs_ul_nb_sources >= MAX_INTERRUPT_SOURCES)
  400336:	4c18      	ldr	r4, [pc, #96]	; (400398 <pio_handler_set+0x64>)
  400338:	6826      	ldr	r6, [r4, #0]
  40033a:	2e06      	cmp	r6, #6
  40033c:	d82a      	bhi.n	400394 <pio_handler_set+0x60>
  40033e:	f04f 0c00 	mov.w	ip, #0
  400342:	4664      	mov	r4, ip
		return 1;

    /* Check interrupt for this pin, if already defined, redefine it. */
	for (i = 0; i <= gs_ul_nb_sources; i++) {
		pSource = &(gs_interrupt_sources[i]);
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400344:	4f15      	ldr	r7, [pc, #84]	; (40039c <pio_handler_set+0x68>)
  400346:	e004      	b.n	400352 <pio_handler_set+0x1e>
	for (i = 0; i <= gs_ul_nb_sources; i++) {
  400348:	3401      	adds	r4, #1
  40034a:	b2e4      	uxtb	r4, r4
  40034c:	46a4      	mov	ip, r4
  40034e:	42a6      	cmp	r6, r4
  400350:	d309      	bcc.n	400366 <pio_handler_set+0x32>
		pSource = &(gs_interrupt_sources[i]);
  400352:	46a6      	mov	lr, r4
		if (pSource->id == ul_id && pSource->mask == ul_mask) {
  400354:	0125      	lsls	r5, r4, #4
  400356:	597d      	ldr	r5, [r7, r5]
  400358:	428d      	cmp	r5, r1
  40035a:	d1f5      	bne.n	400348 <pio_handler_set+0x14>
  40035c:	eb07 1504 	add.w	r5, r7, r4, lsl #4
  400360:	686d      	ldr	r5, [r5, #4]
  400362:	4295      	cmp	r5, r2
  400364:	d1f0      	bne.n	400348 <pio_handler_set+0x14>
			break;
		}
	}

	/* Define new source */
	pSource->id = ul_id;
  400366:	4d0d      	ldr	r5, [pc, #52]	; (40039c <pio_handler_set+0x68>)
  400368:	ea4f 1e0e 	mov.w	lr, lr, lsl #4
  40036c:	eb05 040e 	add.w	r4, r5, lr
  400370:	f845 100e 	str.w	r1, [r5, lr]
	pSource->mask = ul_mask;
  400374:	6062      	str	r2, [r4, #4]
	pSource->attr = ul_attr;
  400376:	60a3      	str	r3, [r4, #8]
	pSource->handler = p_handler;
  400378:	9906      	ldr	r1, [sp, #24]
  40037a:	60e1      	str	r1, [r4, #12]
	if (i == gs_ul_nb_sources + 1) {
  40037c:	3601      	adds	r6, #1
  40037e:	4566      	cmp	r6, ip
  400380:	d005      	beq.n	40038e <pio_handler_set+0x5a>
  400382:	4611      	mov	r1, r2
		gs_ul_nb_sources++;
	}

	/* Configure interrupt mode */
	pio_configure_interrupt(p_pio, ul_mask, ul_attr);
  400384:	461a      	mov	r2, r3
  400386:	4b06      	ldr	r3, [pc, #24]	; (4003a0 <pio_handler_set+0x6c>)
  400388:	4798      	blx	r3

	return 0;
  40038a:	2000      	movs	r0, #0
  40038c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		gs_ul_nb_sources++;
  40038e:	4902      	ldr	r1, [pc, #8]	; (400398 <pio_handler_set+0x64>)
  400390:	600e      	str	r6, [r1, #0]
  400392:	e7f6      	b.n	400382 <pio_handler_set+0x4e>
		return 1;
  400394:	2001      	movs	r0, #1
}
  400396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  400398:	20400f50 	.word	0x20400f50
  40039c:	20400ee0 	.word	0x20400ee0
  4003a0:	004002a7 	.word	0x004002a7

004003a4 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
  4003a4:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
  4003a6:	210a      	movs	r1, #10
  4003a8:	4801      	ldr	r0, [pc, #4]	; (4003b0 <PIOA_Handler+0xc>)
  4003aa:	4b02      	ldr	r3, [pc, #8]	; (4003b4 <PIOA_Handler+0x10>)
  4003ac:	4798      	blx	r3
  4003ae:	bd08      	pop	{r3, pc}
  4003b0:	400e0e00 	.word	0x400e0e00
  4003b4:	004002e5 	.word	0x004002e5

004003b8 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
  4003b8:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
  4003ba:	210b      	movs	r1, #11
  4003bc:	4801      	ldr	r0, [pc, #4]	; (4003c4 <PIOB_Handler+0xc>)
  4003be:	4b02      	ldr	r3, [pc, #8]	; (4003c8 <PIOB_Handler+0x10>)
  4003c0:	4798      	blx	r3
  4003c2:	bd08      	pop	{r3, pc}
  4003c4:	400e1000 	.word	0x400e1000
  4003c8:	004002e5 	.word	0x004002e5

004003cc <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
  4003cc:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
  4003ce:	210c      	movs	r1, #12
  4003d0:	4801      	ldr	r0, [pc, #4]	; (4003d8 <PIOC_Handler+0xc>)
  4003d2:	4b02      	ldr	r3, [pc, #8]	; (4003dc <PIOC_Handler+0x10>)
  4003d4:	4798      	blx	r3
  4003d6:	bd08      	pop	{r3, pc}
  4003d8:	400e1200 	.word	0x400e1200
  4003dc:	004002e5 	.word	0x004002e5

004003e0 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
  4003e0:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
  4003e2:	2110      	movs	r1, #16
  4003e4:	4801      	ldr	r0, [pc, #4]	; (4003ec <PIOD_Handler+0xc>)
  4003e6:	4b02      	ldr	r3, [pc, #8]	; (4003f0 <PIOD_Handler+0x10>)
  4003e8:	4798      	blx	r3
  4003ea:	bd08      	pop	{r3, pc}
  4003ec:	400e1400 	.word	0x400e1400
  4003f0:	004002e5 	.word	0x004002e5

004003f4 <PIOE_Handler>:
/**
 * \brief Parallel IO Controller E interrupt handler.
 * Redefined PIOE interrupt handler for NVIC interrupt table.
 */
void PIOE_Handler(void)
{
  4003f4:	b508      	push	{r3, lr}
	pio_handler_process(PIOE, ID_PIOE);
  4003f6:	2111      	movs	r1, #17
  4003f8:	4801      	ldr	r0, [pc, #4]	; (400400 <PIOE_Handler+0xc>)
  4003fa:	4b02      	ldr	r3, [pc, #8]	; (400404 <PIOE_Handler+0x10>)
  4003fc:	4798      	blx	r3
  4003fe:	bd08      	pop	{r3, pc}
  400400:	400e1600 	.word	0x400e1600
  400404:	004002e5 	.word	0x004002e5

00400408 <pmc_mck_set_division>:
 *
 * \param ul_div Division value.
 */
void pmc_mck_set_division(uint32_t ul_div)
{
	switch (ul_div) {
  400408:	2803      	cmp	r0, #3
  40040a:	d011      	beq.n	400430 <pmc_mck_set_division+0x28>
  40040c:	2804      	cmp	r0, #4
  40040e:	d012      	beq.n	400436 <pmc_mck_set_division+0x2e>
		case 1:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
  400410:	2802      	cmp	r0, #2
  400412:	bf0c      	ite	eq
  400414:	f44f 7180 	moveq.w	r1, #256	; 0x100
  400418:	2100      	movne	r1, #0
		default:
			ul_div = PMC_MCKR_MDIV_EQ_PCK;
			break;
	}
	PMC->PMC_MCKR =
			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
  40041a:	4a08      	ldr	r2, [pc, #32]	; (40043c <pmc_mck_set_division+0x34>)
  40041c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40041e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
  400422:	430b      	orrs	r3, r1
	PMC->PMC_MCKR =
  400424:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400426:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400428:	f013 0f08 	tst.w	r3, #8
  40042c:	d0fb      	beq.n	400426 <pmc_mck_set_division+0x1e>
}
  40042e:	4770      	bx	lr
			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
  400430:	f44f 7140 	mov.w	r1, #768	; 0x300
			break;
  400434:	e7f1      	b.n	40041a <pmc_mck_set_division+0x12>
			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
  400436:	f44f 7100 	mov.w	r1, #512	; 0x200
			break;
  40043a:	e7ee      	b.n	40041a <pmc_mck_set_division+0x12>
  40043c:	400e0600 	.word	0x400e0600

00400440 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  400440:	4a17      	ldr	r2, [pc, #92]	; (4004a0 <pmc_switch_mck_to_pllack+0x60>)
  400442:	6b13      	ldr	r3, [r2, #48]	; 0x30
  400444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  400448:	4318      	orrs	r0, r3
  40044a:	6310      	str	r0, [r2, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  40044c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40044e:	f013 0f08 	tst.w	r3, #8
  400452:	d10a      	bne.n	40046a <pmc_switch_mck_to_pllack+0x2a>
  400454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400458:	4911      	ldr	r1, [pc, #68]	; (4004a0 <pmc_switch_mck_to_pllack+0x60>)
  40045a:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  40045c:	f012 0f08 	tst.w	r2, #8
  400460:	d103      	bne.n	40046a <pmc_switch_mck_to_pllack+0x2a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  400462:	3b01      	subs	r3, #1
  400464:	d1f9      	bne.n	40045a <pmc_switch_mck_to_pllack+0x1a>
			return 1;
  400466:	2001      	movs	r0, #1
  400468:	4770      	bx	lr
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
  40046a:	4a0d      	ldr	r2, [pc, #52]	; (4004a0 <pmc_switch_mck_to_pllack+0x60>)
  40046c:	6b13      	ldr	r3, [r2, #48]	; 0x30
  40046e:	f023 0303 	bic.w	r3, r3, #3
  400472:	f043 0302 	orr.w	r3, r3, #2
  400476:	6313      	str	r3, [r2, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
  400478:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40047a:	f013 0f08 	tst.w	r3, #8
  40047e:	d10a      	bne.n	400496 <pmc_switch_mck_to_pllack+0x56>
  400480:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  400484:	4906      	ldr	r1, [pc, #24]	; (4004a0 <pmc_switch_mck_to_pllack+0x60>)
  400486:	6e8a      	ldr	r2, [r1, #104]	; 0x68
  400488:	f012 0f08 	tst.w	r2, #8
  40048c:	d105      	bne.n	40049a <pmc_switch_mck_to_pllack+0x5a>
			--ul_timeout) {
		if (ul_timeout == 0) {
  40048e:	3b01      	subs	r3, #1
  400490:	d1f9      	bne.n	400486 <pmc_switch_mck_to_pllack+0x46>
			return 1;
  400492:	2001      	movs	r0, #1
		}
	}

	return 0;
}
  400494:	4770      	bx	lr
	return 0;
  400496:	2000      	movs	r0, #0
  400498:	4770      	bx	lr
  40049a:	2000      	movs	r0, #0
  40049c:	4770      	bx	lr
  40049e:	bf00      	nop
  4004a0:	400e0600 	.word	0x400e0600

004004a4 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
  4004a4:	b9a0      	cbnz	r0, 4004d0 <pmc_switch_mainck_to_xtal+0x2c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4004a6:	480e      	ldr	r0, [pc, #56]	; (4004e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4004a8:	6a03      	ldr	r3, [r0, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
  4004aa:	0209      	lsls	r1, r1, #8
  4004ac:	b289      	uxth	r1, r1
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
  4004ae:	4a0d      	ldr	r2, [pc, #52]	; (4004e4 <pmc_switch_mainck_to_xtal+0x40>)
  4004b0:	401a      	ands	r2, r3
  4004b2:	4b0d      	ldr	r3, [pc, #52]	; (4004e8 <pmc_switch_mainck_to_xtal+0x44>)
  4004b4:	4313      	orrs	r3, r2
  4004b6:	4319      	orrs	r1, r3
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  4004b8:	6201      	str	r1, [r0, #32]
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  4004ba:	4602      	mov	r2, r0
  4004bc:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4004be:	f013 0f01 	tst.w	r3, #1
  4004c2:	d0fb      	beq.n	4004bc <pmc_switch_mainck_to_xtal+0x18>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  4004c4:	4a06      	ldr	r2, [pc, #24]	; (4004e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4004c6:	6a11      	ldr	r1, [r2, #32]
  4004c8:	4b08      	ldr	r3, [pc, #32]	; (4004ec <pmc_switch_mainck_to_xtal+0x48>)
  4004ca:	430b      	orrs	r3, r1
  4004cc:	6213      	str	r3, [r2, #32]
  4004ce:	4770      	bx	lr
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004d0:	4903      	ldr	r1, [pc, #12]	; (4004e0 <pmc_switch_mainck_to_xtal+0x3c>)
  4004d2:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4004d4:	4a06      	ldr	r2, [pc, #24]	; (4004f0 <pmc_switch_mainck_to_xtal+0x4c>)
  4004d6:	401a      	ands	r2, r3
  4004d8:	4b06      	ldr	r3, [pc, #24]	; (4004f4 <pmc_switch_mainck_to_xtal+0x50>)
  4004da:	4313      	orrs	r3, r2
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4004dc:	620b      	str	r3, [r1, #32]
  4004de:	4770      	bx	lr
  4004e0:	400e0600 	.word	0x400e0600
  4004e4:	ffc8fffc 	.word	0xffc8fffc
  4004e8:	00370001 	.word	0x00370001
  4004ec:	01370000 	.word	0x01370000
  4004f0:	fec8fffc 	.word	0xfec8fffc
  4004f4:	01370002 	.word	0x01370002

004004f8 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
  4004f8:	4b02      	ldr	r3, [pc, #8]	; (400504 <pmc_osc_is_ready_mainck+0xc>)
  4004fa:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  4004fc:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
  400500:	4770      	bx	lr
  400502:	bf00      	nop
  400504:	400e0600 	.word	0x400e0600

00400508 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
  400508:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
  40050c:	4b01      	ldr	r3, [pc, #4]	; (400514 <pmc_disable_pllack+0xc>)
  40050e:	629a      	str	r2, [r3, #40]	; 0x28
  400510:	4770      	bx	lr
  400512:	bf00      	nop
  400514:	400e0600 	.word	0x400e0600

00400518 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
  400518:	4b02      	ldr	r3, [pc, #8]	; (400524 <pmc_is_locked_pllack+0xc>)
  40051a:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
  40051c:	f000 0002 	and.w	r0, r0, #2
  400520:	4770      	bx	lr
  400522:	bf00      	nop
  400524:	400e0600 	.word	0x400e0600

00400528 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
  400528:	283f      	cmp	r0, #63	; 0x3f
  40052a:	d81e      	bhi.n	40056a <pmc_enable_periph_clk+0x42>
		return 1;
	}

	if (ul_id < 32) {
  40052c:	281f      	cmp	r0, #31
  40052e:	d80c      	bhi.n	40054a <pmc_enable_periph_clk+0x22>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
  400530:	4b11      	ldr	r3, [pc, #68]	; (400578 <pmc_enable_periph_clk+0x50>)
  400532:	699a      	ldr	r2, [r3, #24]
  400534:	2301      	movs	r3, #1
  400536:	4083      	lsls	r3, r0
  400538:	4393      	bics	r3, r2
  40053a:	d018      	beq.n	40056e <pmc_enable_periph_clk+0x46>
			PMC->PMC_PCER0 = 1 << ul_id;
  40053c:	2301      	movs	r3, #1
  40053e:	fa03 f000 	lsl.w	r0, r3, r0
  400542:	4b0d      	ldr	r3, [pc, #52]	; (400578 <pmc_enable_periph_clk+0x50>)
  400544:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
  400546:	2000      	movs	r0, #0
  400548:	4770      	bx	lr
		ul_id -= 32;
  40054a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
  40054c:	4b0a      	ldr	r3, [pc, #40]	; (400578 <pmc_enable_periph_clk+0x50>)
  40054e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
  400552:	2301      	movs	r3, #1
  400554:	4083      	lsls	r3, r0
  400556:	4393      	bics	r3, r2
  400558:	d00b      	beq.n	400572 <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER1 = 1 << ul_id;
  40055a:	2301      	movs	r3, #1
  40055c:	fa03 f000 	lsl.w	r0, r3, r0
  400560:	4b05      	ldr	r3, [pc, #20]	; (400578 <pmc_enable_periph_clk+0x50>)
  400562:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
	return 0;
  400566:	2000      	movs	r0, #0
  400568:	4770      	bx	lr
		return 1;
  40056a:	2001      	movs	r0, #1
  40056c:	4770      	bx	lr
	return 0;
  40056e:	2000      	movs	r0, #0
  400570:	4770      	bx	lr
  400572:	2000      	movs	r0, #0
}
  400574:	4770      	bx	lr
  400576:	bf00      	nop
  400578:	400e0600 	.word	0x400e0600

0040057c <pmc_set_flash_in_wait_mode>:
 *
 * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
 * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
 */
void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
{
  40057c:	4770      	bx	lr
	...

00400580 <pmc_enable_waitmode>:
void pmc_enable_waitmode(void)
{
	uint32_t i;

	/* Flash in wait mode */
	i = PMC->PMC_FSMR;
  400580:	4a10      	ldr	r2, [pc, #64]	; (4005c4 <pmc_enable_waitmode+0x44>)
  400582:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  400584:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
#if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
	i |= ul_flash_in_wait_mode;
#else
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  400588:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
#endif
	PMC->PMC_FSMR = i;
  40058c:	6713      	str	r3, [r2, #112]	; 0x70

	/* Set the WAITMODE bit = 1 */
	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
  40058e:	6a11      	ldr	r1, [r2, #32]
  400590:	4b0d      	ldr	r3, [pc, #52]	; (4005c8 <pmc_enable_waitmode+0x48>)
  400592:	430b      	orrs	r3, r1
  400594:	6213      	str	r3, [r2, #32]

	/* Waiting for Master Clock Ready MCKRDY = 1 */
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400596:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400598:	f013 0f08 	tst.w	r3, #8
  40059c:	d0fb      	beq.n	400596 <pmc_enable_waitmode+0x16>
  40059e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4

    No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
  4005a2:	bf00      	nop

	/* Waiting for MOSCRCEN bit cleared is strongly recommended
	 * to ensure that the core will not execute undesired instructions
	 */
	for (i = 0; i < 500; i++) {
  4005a4:	3b01      	subs	r3, #1
  4005a6:	d1fc      	bne.n	4005a2 <pmc_enable_waitmode+0x22>
		__NOP();
	}
	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
  4005a8:	4a06      	ldr	r2, [pc, #24]	; (4005c4 <pmc_enable_waitmode+0x44>)
  4005aa:	6a13      	ldr	r3, [r2, #32]
  4005ac:	f013 0f08 	tst.w	r3, #8
  4005b0:	d0fb      	beq.n	4005aa <pmc_enable_waitmode+0x2a>

#if (!SAMG)
	/* Restore Flash in idle mode */
	i = PMC->PMC_FSMR;
  4005b2:	4a04      	ldr	r2, [pc, #16]	; (4005c4 <pmc_enable_waitmode+0x44>)
  4005b4:	6f13      	ldr	r3, [r2, #112]	; 0x70
	i &= ~PMC_FSMR_FLPM_Msk;
  4005b6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
	i |= PMC_WAIT_MODE_FLASH_IDLE;
  4005ba:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
	PMC->PMC_FSMR = i;
  4005be:	6713      	str	r3, [r2, #112]	; 0x70
  4005c0:	4770      	bx	lr
  4005c2:	bf00      	nop
  4005c4:	400e0600 	.word	0x400e0600
  4005c8:	00370004 	.word	0x00370004

004005cc <pmc_sleep>:
static volatile bool b_is_sleep_clock_used = false;
/** Callback invoked once when clocks are restored */
static pmc_callback_wakeup_clocks_restored_t callback_clocks_restored = NULL;

void pmc_sleep(int sleep_mode)
{
  4005cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	switch (sleep_mode) {
  4005d0:	1e43      	subs	r3, r0, #1
  4005d2:	2b04      	cmp	r3, #4
  4005d4:	f200 8105 	bhi.w	4007e2 <pmc_sleep+0x216>
  4005d8:	e8df f013 	tbh	[pc, r3, lsl #1]
  4005dc:	00050005 	.word	0x00050005
  4005e0:	00130013 	.word	0x00130013
  4005e4:	00f4      	.short	0x00f4
	case SAM_PM_SMODE_SLEEP_WFI:
	case SAM_PM_SMODE_SLEEP_WFE:
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SCB->SCR &= (uint32_t)~SCR_SLEEPDEEP;
  4005e6:	4a80      	ldr	r2, [pc, #512]	; (4007e8 <pmc_sleep+0x21c>)
  4005e8:	6913      	ldr	r3, [r2, #16]
  4005ea:	f023 0304 	bic.w	r3, r3, #4
  4005ee:	6113      	str	r3, [r2, #16]
		cpu_irq_enable();
  4005f0:	2201      	movs	r2, #1
  4005f2:	4b7e      	ldr	r3, [pc, #504]	; (4007ec <pmc_sleep+0x220>)
  4005f4:	701a      	strb	r2, [r3, #0]
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
  4005f6:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
  4005fa:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4005fc:	bf30      	wfi
  4005fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  400602:	4604      	mov	r4, r0
#if defined(EFC1)
		uint32_t fmr1;
#endif
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG || SAMV71 || SAMV70 || SAMS70 || SAME70)
		(sleep_mode == SAM_PM_SMODE_WAIT_FAST) ?
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_STANDBY) :
  400604:	2803      	cmp	r0, #3
  400606:	bf0c      	ite	eq
  400608:	2000      	moveq	r0, #0
				pmc_set_flash_in_wait_mode(PMC_FSMR_FLPM_FLASH_DEEP_POWERDOWN);
  40060a:	f44f 1000 	movne.w	r0, #2097152	; 0x200000
  40060e:	4b78      	ldr	r3, [pc, #480]	; (4007f0 <pmc_sleep+0x224>)
  400610:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
  400612:	b672      	cpsid	i
  __ASM volatile ("dmb");
  400614:	f3bf 8f5f 	dmb	sy
#endif
		cpu_irq_disable();
  400618:	2200      	movs	r2, #0
  40061a:	4b74      	ldr	r3, [pc, #464]	; (4007ec <pmc_sleep+0x220>)
  40061c:	701a      	strb	r2, [r3, #0]
		b_is_sleep_clock_used = true;
  40061e:	2201      	movs	r2, #1
  400620:	4b74      	ldr	r3, [pc, #464]	; (4007f4 <pmc_sleep+0x228>)
  400622:	701a      	strb	r2, [r3, #0]
	uint32_t mor  = PMC->CKGR_MOR;
  400624:	4b74      	ldr	r3, [pc, #464]	; (4007f8 <pmc_sleep+0x22c>)
  400626:	6a1f      	ldr	r7, [r3, #32]
	uint32_t mckr = PMC->PMC_MCKR;
  400628:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	uint32_t fmr  = EFC0->EEFC_FMR;
  40062a:	4a74      	ldr	r2, [pc, #464]	; (4007fc <pmc_sleep+0x230>)
  40062c:	f8d2 8000 	ldr.w	r8, [r2]
		*p_pll0_setting = PMC->CKGR_PLLAR;
  400630:	6a9e      	ldr	r6, [r3, #40]	; 0x28
	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor | CKGR_MOR_MOSCRCEN;
  400632:	4a73      	ldr	r2, [pc, #460]	; (400800 <pmc_sleep+0x234>)
  400634:	433a      	orrs	r2, r7
  400636:	621a      	str	r2, [r3, #32]
	if ((mckr & PMC_MCKR_CSS_Msk) > PMC_MCKR_CSS_MAIN_CLK) {
  400638:	f005 0903 	and.w	r9, r5, #3
  40063c:	f1b9 0f01 	cmp.w	r9, #1
  400640:	f240 8089 	bls.w	400756 <pmc_sleep+0x18a>
		mckr = (mckr & (~PMC_MCKR_CSS_Msk)) | PMC_MCKR_CSS_MAIN_CLK;
  400644:	f025 0103 	bic.w	r1, r5, #3
  400648:	f041 0101 	orr.w	r1, r1, #1
		PMC->PMC_MCKR = mckr;
  40064c:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40064e:	461a      	mov	r2, r3
  400650:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400652:	f013 0f08 	tst.w	r3, #8
  400656:	d0fb      	beq.n	400650 <pmc_sleep+0x84>
	if (mckr & PMC_MCKR_PRES_Msk) {
  400658:	f011 0f70 	tst.w	r1, #112	; 0x70
  40065c:	d008      	beq.n	400670 <pmc_sleep+0xa4>
		mckr = (mckr & (~PMC_MCKR_PRES_Msk));
  40065e:	f021 0170 	bic.w	r1, r1, #112	; 0x70
		PMC->PMC_MCKR = mckr;
  400662:	4b65      	ldr	r3, [pc, #404]	; (4007f8 <pmc_sleep+0x22c>)
  400664:	6319      	str	r1, [r3, #48]	; 0x30
		while(!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400666:	461a      	mov	r2, r3
  400668:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40066a:	f013 0f08 	tst.w	r3, #8
  40066e:	d0fb      	beq.n	400668 <pmc_sleep+0x9c>
	pmc_disable_pllack();
  400670:	4b64      	ldr	r3, [pc, #400]	; (400804 <pmc_sleep+0x238>)
  400672:	4798      	blx	r3
	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
  400674:	4a60      	ldr	r2, [pc, #384]	; (4007f8 <pmc_sleep+0x22c>)
  400676:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400678:	f413 3f00 	tst.w	r3, #131072	; 0x20000
  40067c:	d0fb      	beq.n	400676 <pmc_sleep+0xaa>
	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
  40067e:	4a5e      	ldr	r2, [pc, #376]	; (4007f8 <pmc_sleep+0x22c>)
  400680:	6a11      	ldr	r1, [r2, #32]
  400682:	4b61      	ldr	r3, [pc, #388]	; (400808 <pmc_sleep+0x23c>)
  400684:	400b      	ands	r3, r1
  400686:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  40068a:	6213      	str	r3, [r2, #32]
	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  40068c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40068e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  400692:	d0fb      	beq.n	40068c <pmc_sleep+0xc0>
	EFC0->EEFC_FMR = fmr & (~EEFC_FMR_FWS_Msk);
  400694:	f428 6370 	bic.w	r3, r8, #3840	; 0xf00
  400698:	4a58      	ldr	r2, [pc, #352]	; (4007fc <pmc_sleep+0x230>)
  40069a:	6013      	str	r3, [r2, #0]
	if (disable_xtal) {
  40069c:	2c04      	cmp	r4, #4
  40069e:	d05c      	beq.n	40075a <pmc_sleep+0x18e>
				&fmr1,
#endif
				(sleep_mode == SAM_PM_SMODE_WAIT));

		/* Enter wait mode */
		cpu_irq_enable();
  4006a0:	4c52      	ldr	r4, [pc, #328]	; (4007ec <pmc_sleep+0x220>)
  4006a2:	2301      	movs	r3, #1
  4006a4:	7023      	strb	r3, [r4, #0]
  4006a6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4006aa:	b662      	cpsie	i

		pmc_enable_waitmode();
  4006ac:	4b57      	ldr	r3, [pc, #348]	; (40080c <pmc_sleep+0x240>)
  4006ae:	4798      	blx	r3
  __ASM volatile ("cpsid i" : : : "memory");
  4006b0:	b672      	cpsid	i
  4006b2:	f3bf 8f5f 	dmb	sy

		cpu_irq_disable();
  4006b6:	2300      	movs	r3, #0
  4006b8:	7023      	strb	r3, [r4, #0]
	if (CKGR_MOR_MOSCXTBY == (osc_setting & CKGR_MOR_MOSCXTBY)) {
  4006ba:	f017 0f02 	tst.w	r7, #2
  4006be:	d055      	beq.n	40076c <pmc_sleep+0x1a0>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006c0:	4a4d      	ldr	r2, [pc, #308]	; (4007f8 <pmc_sleep+0x22c>)
  4006c2:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
  4006c4:	4952      	ldr	r1, [pc, #328]	; (400810 <pmc_sleep+0x244>)
  4006c6:	4019      	ands	r1, r3
  4006c8:	4b52      	ldr	r3, [pc, #328]	; (400814 <pmc_sleep+0x248>)
  4006ca:	430b      	orrs	r3, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  4006cc:	6213      	str	r3, [r2, #32]
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4006ce:	6a11      	ldr	r1, [r2, #32]
				| CKGR_MOR_KEY_PASSWD;
  4006d0:	4b51      	ldr	r3, [pc, #324]	; (400818 <pmc_sleep+0x24c>)
  4006d2:	400b      	ands	r3, r1
  4006d4:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4006d8:	6213      	str	r3, [r2, #32]
	if (pll0_setting & CKGR_PLLAR_MULA_Msk) {
  4006da:	4b50      	ldr	r3, [pc, #320]	; (40081c <pmc_sleep+0x250>)
  4006dc:	4033      	ands	r3, r6
  4006de:	2b00      	cmp	r3, #0
  4006e0:	d06e      	beq.n	4007c0 <pmc_sleep+0x1f4>
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | pll0_setting;
  4006e2:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
  4006e6:	4b44      	ldr	r3, [pc, #272]	; (4007f8 <pmc_sleep+0x22c>)
  4006e8:	629e      	str	r6, [r3, #40]	; 0x28
		pll_sr |= PMC_SR_LOCKA;
  4006ea:	2102      	movs	r1, #2
	switch(mck_setting & PMC_MCKR_CSS_Msk) {
  4006ec:	f1b9 0f02 	cmp.w	r9, #2
  4006f0:	d104      	bne.n	4006fc <pmc_sleep+0x130>
		while (!(PMC->PMC_SR & PMC_SR_LOCKA));
  4006f2:	4a41      	ldr	r2, [pc, #260]	; (4007f8 <pmc_sleep+0x22c>)
  4006f4:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4006f6:	f013 0f02 	tst.w	r3, #2
  4006fa:	d0fb      	beq.n	4006f4 <pmc_sleep+0x128>
	mckr = PMC->PMC_MCKR;
  4006fc:	4a3e      	ldr	r2, [pc, #248]	; (4007f8 <pmc_sleep+0x22c>)
  4006fe:	6b13      	ldr	r3, [r2, #48]	; 0x30
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  400700:	f023 0370 	bic.w	r3, r3, #112	; 0x70
		| (mck_setting & PMC_MCKR_PRES_Msk);
  400704:	f005 0070 	and.w	r0, r5, #112	; 0x70
  400708:	4303      	orrs	r3, r0
	PMC->PMC_MCKR = (mckr & ~PMC_MCKR_PRES_Msk)
  40070a:	6313      	str	r3, [r2, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  40070c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40070e:	f013 0f08 	tst.w	r3, #8
  400712:	d0fb      	beq.n	40070c <pmc_sleep+0x140>
	EFC0->EEFC_FMR = fmr_setting;
  400714:	4b39      	ldr	r3, [pc, #228]	; (4007fc <pmc_sleep+0x230>)
  400716:	f8c3 8000 	str.w	r8, [r3]
	PMC->PMC_MCKR = mck_setting;
  40071a:	f5a3 63c0 	sub.w	r3, r3, #1536	; 0x600
  40071e:	631d      	str	r5, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  400720:	461a      	mov	r2, r3
  400722:	6e93      	ldr	r3, [r2, #104]	; 0x68
  400724:	f013 0f08 	tst.w	r3, #8
  400728:	d0fb      	beq.n	400722 <pmc_sleep+0x156>
	while (!(PMC->PMC_SR & pll_sr));
  40072a:	4a33      	ldr	r2, [pc, #204]	; (4007f8 <pmc_sleep+0x22c>)
  40072c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40072e:	420b      	tst	r3, r1
  400730:	d0fc      	beq.n	40072c <pmc_sleep+0x160>

#if (SAM4C || SAM4CM || SAM4CP)
		/* Restore the sub-system 1 */
		PMC->PMC_SCER = cpclk_backup | PMC_SCER_CPKEY_PASSWD;
#endif
		b_is_sleep_clock_used = false;
  400732:	2200      	movs	r2, #0
  400734:	4b2f      	ldr	r3, [pc, #188]	; (4007f4 <pmc_sleep+0x228>)
  400736:	701a      	strb	r2, [r3, #0]
		if (callback_clocks_restored) {
  400738:	4b39      	ldr	r3, [pc, #228]	; (400820 <pmc_sleep+0x254>)
  40073a:	681b      	ldr	r3, [r3, #0]
  40073c:	b11b      	cbz	r3, 400746 <pmc_sleep+0x17a>
			callback_clocks_restored();
  40073e:	4798      	blx	r3
			callback_clocks_restored = NULL;
  400740:	2200      	movs	r2, #0
  400742:	4b37      	ldr	r3, [pc, #220]	; (400820 <pmc_sleep+0x254>)
  400744:	601a      	str	r2, [r3, #0]
		}
		cpu_irq_enable();
  400746:	2201      	movs	r2, #1
  400748:	4b28      	ldr	r3, [pc, #160]	; (4007ec <pmc_sleep+0x220>)
  40074a:	701a      	strb	r2, [r3, #0]
  40074c:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  400750:	b662      	cpsie	i
  400752:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uint32_t mckr = PMC->PMC_MCKR;
  400756:	4629      	mov	r1, r5
  400758:	e77e      	b.n	400658 <pmc_sleep+0x8c>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
  40075a:	f5a2 62c0 	sub.w	r2, r2, #1536	; 0x600
  40075e:	6a11      	ldr	r1, [r2, #32]
  400760:	4b30      	ldr	r3, [pc, #192]	; (400824 <pmc_sleep+0x258>)
  400762:	400b      	ands	r3, r1
  400764:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
  400768:	6213      	str	r3, [r2, #32]
  40076a:	e799      	b.n	4006a0 <pmc_sleep+0xd4>
	} else if (CKGR_MOR_MOSCXTEN == (osc_setting & CKGR_MOR_MOSCXTEN)) {
  40076c:	f017 0f01 	tst.w	r7, #1
  400770:	d0b3      	beq.n	4006da <pmc_sleep+0x10e>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCXTEN)) {
  400772:	4b21      	ldr	r3, [pc, #132]	; (4007f8 <pmc_sleep+0x22c>)
  400774:	6a1b      	ldr	r3, [r3, #32]
  400776:	f013 0f01 	tst.w	r3, #1
  40077a:	d10b      	bne.n	400794 <pmc_sleep+0x1c8>
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  40077c:	491e      	ldr	r1, [pc, #120]	; (4007f8 <pmc_sleep+0x22c>)
  40077e:	6a0b      	ldr	r3, [r1, #32]
					CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN;
  400780:	4a29      	ldr	r2, [pc, #164]	; (400828 <pmc_sleep+0x25c>)
  400782:	401a      	ands	r2, r3
  400784:	4b29      	ldr	r3, [pc, #164]	; (40082c <pmc_sleep+0x260>)
  400786:	4313      	orrs	r3, r2
			PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
  400788:	620b      	str	r3, [r1, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
  40078a:	460a      	mov	r2, r1
  40078c:	6e93      	ldr	r3, [r2, #104]	; 0x68
  40078e:	f013 0f01 	tst.w	r3, #1
  400792:	d0fb      	beq.n	40078c <pmc_sleep+0x1c0>
		if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
  400794:	4b18      	ldr	r3, [pc, #96]	; (4007f8 <pmc_sleep+0x22c>)
  400796:	6a1b      	ldr	r3, [r3, #32]
  400798:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  40079c:	d108      	bne.n	4007b0 <pmc_sleep+0x1e4>
			PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
  40079e:	4a16      	ldr	r2, [pc, #88]	; (4007f8 <pmc_sleep+0x22c>)
  4007a0:	6a11      	ldr	r1, [r2, #32]
  4007a2:	4b23      	ldr	r3, [pc, #140]	; (400830 <pmc_sleep+0x264>)
  4007a4:	430b      	orrs	r3, r1
  4007a6:	6213      	str	r3, [r2, #32]
			while (!(PMC->PMC_SR & PMC_SR_MOSCSELS));
  4007a8:	6e93      	ldr	r3, [r2, #104]	; 0x68
  4007aa:	f413 3f80 	tst.w	r3, #65536	; 0x10000
  4007ae:	d0fb      	beq.n	4007a8 <pmc_sleep+0x1dc>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007b0:	4a11      	ldr	r2, [pc, #68]	; (4007f8 <pmc_sleep+0x22c>)
  4007b2:	6a11      	ldr	r1, [r2, #32]
					| CKGR_MOR_KEY_PASSWD;
  4007b4:	4b18      	ldr	r3, [pc, #96]	; (400818 <pmc_sleep+0x24c>)
  4007b6:	400b      	ands	r3, r1
  4007b8:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
  4007bc:	6213      	str	r3, [r2, #32]
  4007be:	e78c      	b.n	4006da <pmc_sleep+0x10e>
	uint32_t pll_sr = 0;
  4007c0:	2100      	movs	r1, #0
  4007c2:	e793      	b.n	4006ec <pmc_sleep+0x120>

		break;
	}
#if (!(SAMG51 || SAMG53 || SAMG54))
	case SAM_PM_SMODE_BACKUP:
		SCB->SCR |= SCR_SLEEPDEEP;
  4007c4:	4a08      	ldr	r2, [pc, #32]	; (4007e8 <pmc_sleep+0x21c>)
  4007c6:	6913      	ldr	r3, [r2, #16]
  4007c8:	f043 0304 	orr.w	r3, r3, #4
  4007cc:	6113      	str	r3, [r2, #16]
#if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAMS70 || SAME70)
		SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
  4007ce:	4a19      	ldr	r2, [pc, #100]	; (400834 <pmc_sleep+0x268>)
  4007d0:	4b19      	ldr	r3, [pc, #100]	; (400838 <pmc_sleep+0x26c>)
  4007d2:	601a      	str	r2, [r3, #0]
		cpu_irq_enable();
  4007d4:	2201      	movs	r2, #1
  4007d6:	4b05      	ldr	r3, [pc, #20]	; (4007ec <pmc_sleep+0x220>)
  4007d8:	701a      	strb	r2, [r3, #0]
  4007da:	f3bf 8f5f 	dmb	sy
  4007de:	b662      	cpsie	i
  __ASM volatile ("wfi");
  4007e0:	bf30      	wfi
  4007e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  4007e6:	bf00      	nop
  4007e8:	e000ed00 	.word	0xe000ed00
  4007ec:	2040000a 	.word	0x2040000a
  4007f0:	0040057d 	.word	0x0040057d
  4007f4:	20400f54 	.word	0x20400f54
  4007f8:	400e0600 	.word	0x400e0600
  4007fc:	400e0c00 	.word	0x400e0c00
  400800:	00370008 	.word	0x00370008
  400804:	00400509 	.word	0x00400509
  400808:	fec8ffff 	.word	0xfec8ffff
  40080c:	00400581 	.word	0x00400581
  400810:	fec8fffc 	.word	0xfec8fffc
  400814:	01370002 	.word	0x01370002
  400818:	ffc8ff87 	.word	0xffc8ff87
  40081c:	07ff0000 	.word	0x07ff0000
  400820:	20400f58 	.word	0x20400f58
  400824:	ffc8fffe 	.word	0xffc8fffe
  400828:	ffc8fffc 	.word	0xffc8fffc
  40082c:	00370001 	.word	0x00370001
  400830:	01370000 	.word	0x01370000
  400834:	a5000004 	.word	0xa5000004
  400838:	400e1810 	.word	0x400e1810

0040083c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
  40083c:	e7fe      	b.n	40083c <Dummy_Handler>
	...

00400840 <Reset_Handler>:
{
  400840:	b500      	push	{lr}
  400842:	b083      	sub	sp, #12
        if (pSrc != pDest) {
  400844:	4b25      	ldr	r3, [pc, #148]	; (4008dc <Reset_Handler+0x9c>)
  400846:	4a26      	ldr	r2, [pc, #152]	; (4008e0 <Reset_Handler+0xa0>)
  400848:	429a      	cmp	r2, r3
  40084a:	d010      	beq.n	40086e <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
  40084c:	4b25      	ldr	r3, [pc, #148]	; (4008e4 <Reset_Handler+0xa4>)
  40084e:	4a23      	ldr	r2, [pc, #140]	; (4008dc <Reset_Handler+0x9c>)
  400850:	429a      	cmp	r2, r3
  400852:	d20c      	bcs.n	40086e <Reset_Handler+0x2e>
  400854:	3b01      	subs	r3, #1
  400856:	1a9b      	subs	r3, r3, r2
  400858:	f023 0303 	bic.w	r3, r3, #3
  40085c:	3304      	adds	r3, #4
  40085e:	4413      	add	r3, r2
  400860:	491f      	ldr	r1, [pc, #124]	; (4008e0 <Reset_Handler+0xa0>)
                        *pDest++ = *pSrc++;
  400862:	f851 0b04 	ldr.w	r0, [r1], #4
  400866:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
  40086a:	429a      	cmp	r2, r3
  40086c:	d1f9      	bne.n	400862 <Reset_Handler+0x22>
        for (pDest = &_szero; pDest < &_ezero;) {
  40086e:	4b1e      	ldr	r3, [pc, #120]	; (4008e8 <Reset_Handler+0xa8>)
  400870:	4a1e      	ldr	r2, [pc, #120]	; (4008ec <Reset_Handler+0xac>)
  400872:	429a      	cmp	r2, r3
  400874:	d20a      	bcs.n	40088c <Reset_Handler+0x4c>
  400876:	3b01      	subs	r3, #1
  400878:	1a9b      	subs	r3, r3, r2
  40087a:	f023 0303 	bic.w	r3, r3, #3
  40087e:	3304      	adds	r3, #4
  400880:	4413      	add	r3, r2
                *pDest++ = 0;
  400882:	2100      	movs	r1, #0
  400884:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
  400888:	4293      	cmp	r3, r2
  40088a:	d1fb      	bne.n	400884 <Reset_Handler+0x44>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
  40088c:	4a18      	ldr	r2, [pc, #96]	; (4008f0 <Reset_Handler+0xb0>)
  40088e:	4b19      	ldr	r3, [pc, #100]	; (4008f4 <Reset_Handler+0xb4>)
  400890:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
  400894:	6093      	str	r3, [r2, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
  400896:	f3ef 8310 	mrs	r3, PRIMASK
static volatile uint32_t cpu_irq_critical_section_counter;
static volatile bool     cpu_irq_prev_interrupt_state;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = cpu_irq_is_enabled();
  40089a:	fab3 f383 	clz	r3, r3
  40089e:	095b      	lsrs	r3, r3, #5
  4008a0:	9301      	str	r3, [sp, #4]
  __ASM volatile ("cpsid i" : : : "memory");
  4008a2:	b672      	cpsid	i
  __ASM volatile ("dmb");
  4008a4:	f3bf 8f5f 	dmb	sy
	cpu_irq_disable();
  4008a8:	2200      	movs	r2, #0
  4008aa:	4b13      	ldr	r3, [pc, #76]	; (4008f8 <Reset_Handler+0xb8>)
  4008ac:	701a      	strb	r2, [r3, #0]
	return flags;
  4008ae:	9901      	ldr	r1, [sp, #4]
 */
__always_inline static void fpu_enable(void)
{
	irqflags_t flags;
	flags = cpu_irq_save();
	REG_CPACR |=  (0xFu << 20);
  4008b0:	4a12      	ldr	r2, [pc, #72]	; (4008fc <Reset_Handler+0xbc>)
  4008b2:	6813      	ldr	r3, [r2, #0]
  4008b4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
  4008b8:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb");
  4008ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb");
  4008be:	f3bf 8f6f 	isb	sy
	return (flags);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	if (cpu_irq_is_enabled_flags(flags))
  4008c2:	b129      	cbz	r1, 4008d0 <Reset_Handler+0x90>
		cpu_irq_enable();
  4008c4:	2201      	movs	r2, #1
  4008c6:	4b0c      	ldr	r3, [pc, #48]	; (4008f8 <Reset_Handler+0xb8>)
  4008c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dmb");
  4008ca:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("cpsie i" : : : "memory");
  4008ce:	b662      	cpsie	i
        __libc_init_array();
  4008d0:	4b0b      	ldr	r3, [pc, #44]	; (400900 <Reset_Handler+0xc0>)
  4008d2:	4798      	blx	r3
        main();
  4008d4:	4b0b      	ldr	r3, [pc, #44]	; (400904 <Reset_Handler+0xc4>)
  4008d6:	4798      	blx	r3
  4008d8:	e7fe      	b.n	4008d8 <Reset_Handler+0x98>
  4008da:	bf00      	nop
  4008dc:	20400000 	.word	0x20400000
  4008e0:	00401e70 	.word	0x00401e70
  4008e4:	20400ec4 	.word	0x20400ec4
  4008e8:	20400f84 	.word	0x20400f84
  4008ec:	20400ec4 	.word	0x20400ec4
  4008f0:	e000ed00 	.word	0xe000ed00
  4008f4:	00400000 	.word	0x00400000
  4008f8:	2040000a 	.word	0x2040000a
  4008fc:	e000ed88 	.word	0xe000ed88
  400900:	00401ca9 	.word	0x00401ca9
  400904:	004010dd 	.word	0x004010dd

00400908 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate( void )
{
  /* Determine clock frequency according to clock register values */
  switch (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk)
  400908:	4b3b      	ldr	r3, [pc, #236]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  40090a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40090c:	f003 0303 	and.w	r3, r3, #3
  400910:	2b01      	cmp	r3, #1
  400912:	d01d      	beq.n	400950 <SystemCoreClockUpdate+0x48>
  400914:	b183      	cbz	r3, 400938 <SystemCoreClockUpdate+0x30>
  400916:	2b02      	cmp	r3, #2
  400918:	d036      	beq.n	400988 <SystemCoreClockUpdate+0x80>

    default:
    break;
  }

  if ( (PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3 )
  40091a:	4b37      	ldr	r3, [pc, #220]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  40091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40091e:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400922:	2b70      	cmp	r3, #112	; 0x70
  400924:	d05f      	beq.n	4009e6 <SystemCoreClockUpdate+0xde>
  {
    SystemCoreClock /= 3U;
  }
  else
  {
    SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> PMC_MCKR_PRES_Pos);
  400926:	4b34      	ldr	r3, [pc, #208]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  400928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  40092a:	4934      	ldr	r1, [pc, #208]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40092c:	f3c2 1202 	ubfx	r2, r2, #4, #3
  400930:	680b      	ldr	r3, [r1, #0]
  400932:	40d3      	lsrs	r3, r2
  400934:	600b      	str	r3, [r1, #0]
  400936:	4770      	bx	lr
      if ( SUPC->SUPC_SR & SUPC_SR_OSCSEL )
  400938:	4b31      	ldr	r3, [pc, #196]	; (400a00 <SystemCoreClockUpdate+0xf8>)
  40093a:	695b      	ldr	r3, [r3, #20]
  40093c:	f013 0f80 	tst.w	r3, #128	; 0x80
        SystemCoreClock = CHIP_FREQ_XTAL_32K;
  400940:	bf14      	ite	ne
  400942:	f44f 4200 	movne.w	r2, #32768	; 0x8000
        SystemCoreClock = CHIP_FREQ_SLCK_RC;
  400946:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
  40094a:	4b2c      	ldr	r3, [pc, #176]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40094c:	601a      	str	r2, [r3, #0]
  40094e:	e7e4      	b.n	40091a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400950:	4b29      	ldr	r3, [pc, #164]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  400952:	6a1b      	ldr	r3, [r3, #32]
  400954:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400958:	d003      	beq.n	400962 <SystemCoreClockUpdate+0x5a>
        SystemCoreClock = CHIP_FREQ_XTAL_12M;
  40095a:	4a2a      	ldr	r2, [pc, #168]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40095c:	4b27      	ldr	r3, [pc, #156]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40095e:	601a      	str	r2, [r3, #0]
  400960:	e7db      	b.n	40091a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  400962:	4a29      	ldr	r2, [pc, #164]	; (400a08 <SystemCoreClockUpdate+0x100>)
  400964:	4b25      	ldr	r3, [pc, #148]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400966:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  400968:	4b23      	ldr	r3, [pc, #140]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  40096a:	6a1b      	ldr	r3, [r3, #32]
  40096c:	f003 0370 	and.w	r3, r3, #112	; 0x70
  400970:	2b10      	cmp	r3, #16
  400972:	d005      	beq.n	400980 <SystemCoreClockUpdate+0x78>
  400974:	2b20      	cmp	r3, #32
  400976:	d1d0      	bne.n	40091a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 3U;
  400978:	4a22      	ldr	r2, [pc, #136]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  40097a:	4b20      	ldr	r3, [pc, #128]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  40097c:	601a      	str	r2, [r3, #0]
          break;
  40097e:	e7cc      	b.n	40091a <SystemCoreClockUpdate+0x12>
            SystemCoreClock *= 2U;
  400980:	4a22      	ldr	r2, [pc, #136]	; (400a0c <SystemCoreClockUpdate+0x104>)
  400982:	4b1e      	ldr	r3, [pc, #120]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400984:	601a      	str	r2, [r3, #0]
          break;
  400986:	e7c8      	b.n	40091a <SystemCoreClockUpdate+0x12>
      if ( PMC->CKGR_MOR & CKGR_MOR_MOSCSEL )
  400988:	4b1b      	ldr	r3, [pc, #108]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  40098a:	6a1b      	ldr	r3, [r3, #32]
  40098c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
  400990:	d016      	beq.n	4009c0 <SystemCoreClockUpdate+0xb8>
        SystemCoreClock = CHIP_FREQ_XTAL_12M ;
  400992:	4a1c      	ldr	r2, [pc, #112]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  400994:	4b19      	ldr	r3, [pc, #100]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  400996:	601a      	str	r2, [r3, #0]
      if ( (uint32_t) (PMC->PMC_MCKR & (uint32_t) PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK )
  400998:	4b17      	ldr	r3, [pc, #92]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  40099a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  40099c:	f003 0303 	and.w	r3, r3, #3
  4009a0:	2b02      	cmp	r3, #2
  4009a2:	d1ba      	bne.n	40091a <SystemCoreClockUpdate+0x12>
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009a4:	4a14      	ldr	r2, [pc, #80]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  4009a6:	6a91      	ldr	r1, [r2, #40]	; 0x28
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009a8:	6a92      	ldr	r2, [r2, #40]	; 0x28
  4009aa:	4814      	ldr	r0, [pc, #80]	; (4009fc <SystemCoreClockUpdate+0xf4>)
        SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> CKGR_PLLAR_MULA_Pos) + 1U);
  4009ac:	f3c1 410a 	ubfx	r1, r1, #16, #11
  4009b0:	6803      	ldr	r3, [r0, #0]
  4009b2:	fb01 3303 	mla	r3, r1, r3, r3
        SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> CKGR_PLLAR_DIVA_Pos));
  4009b6:	b2d2      	uxtb	r2, r2
  4009b8:	fbb3 f3f2 	udiv	r3, r3, r2
  4009bc:	6003      	str	r3, [r0, #0]
  4009be:	e7ac      	b.n	40091a <SystemCoreClockUpdate+0x12>
        SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
  4009c0:	4a11      	ldr	r2, [pc, #68]	; (400a08 <SystemCoreClockUpdate+0x100>)
  4009c2:	4b0e      	ldr	r3, [pc, #56]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009c4:	601a      	str	r2, [r3, #0]
        switch ( PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk )
  4009c6:	4b0c      	ldr	r3, [pc, #48]	; (4009f8 <SystemCoreClockUpdate+0xf0>)
  4009c8:	6a1b      	ldr	r3, [r3, #32]
  4009ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
  4009ce:	2b10      	cmp	r3, #16
  4009d0:	d005      	beq.n	4009de <SystemCoreClockUpdate+0xd6>
  4009d2:	2b20      	cmp	r3, #32
  4009d4:	d1e0      	bne.n	400998 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 3U;
  4009d6:	4a0b      	ldr	r2, [pc, #44]	; (400a04 <SystemCoreClockUpdate+0xfc>)
  4009d8:	4b08      	ldr	r3, [pc, #32]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009da:	601a      	str	r2, [r3, #0]
          break;
  4009dc:	e7dc      	b.n	400998 <SystemCoreClockUpdate+0x90>
            SystemCoreClock *= 2U;
  4009de:	4a0b      	ldr	r2, [pc, #44]	; (400a0c <SystemCoreClockUpdate+0x104>)
  4009e0:	4b06      	ldr	r3, [pc, #24]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009e2:	601a      	str	r2, [r3, #0]
          break;
  4009e4:	e7d8      	b.n	400998 <SystemCoreClockUpdate+0x90>
    SystemCoreClock /= 3U;
  4009e6:	4a05      	ldr	r2, [pc, #20]	; (4009fc <SystemCoreClockUpdate+0xf4>)
  4009e8:	6813      	ldr	r3, [r2, #0]
  4009ea:	4909      	ldr	r1, [pc, #36]	; (400a10 <SystemCoreClockUpdate+0x108>)
  4009ec:	fba1 1303 	umull	r1, r3, r1, r3
  4009f0:	085b      	lsrs	r3, r3, #1
  4009f2:	6013      	str	r3, [r2, #0]
  4009f4:	4770      	bx	lr
  4009f6:	bf00      	nop
  4009f8:	400e0600 	.word	0x400e0600
  4009fc:	2040000c 	.word	0x2040000c
  400a00:	400e1810 	.word	0x400e1810
  400a04:	00b71b00 	.word	0x00b71b00
  400a08:	003d0900 	.word	0x003d0900
  400a0c:	007a1200 	.word	0x007a1200
  400a10:	aaaaaaab 	.word	0xaaaaaaab

00400a14 <system_init_flash>:
 * Initialize flash.
 */
void system_init_flash( uint32_t ul_clk )
{
  /* Set FWS for embedded Flash access according to operating frequency */
  if ( ul_clk < CHIP_FREQ_FWS_0 )
  400a14:	4b12      	ldr	r3, [pc, #72]	; (400a60 <system_init_flash+0x4c>)
  400a16:	4298      	cmp	r0, r3
  400a18:	d911      	bls.n	400a3e <system_init_flash+0x2a>
  {
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  }
  else
  {
    if (ul_clk < CHIP_FREQ_FWS_1)
  400a1a:	4b12      	ldr	r3, [pc, #72]	; (400a64 <system_init_flash+0x50>)
  400a1c:	4298      	cmp	r0, r3
  400a1e:	d913      	bls.n	400a48 <system_init_flash+0x34>
    {
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
    }
    else
    {
      if (ul_clk < CHIP_FREQ_FWS_2)
  400a20:	4b11      	ldr	r3, [pc, #68]	; (400a68 <system_init_flash+0x54>)
  400a22:	4298      	cmp	r0, r3
  400a24:	d914      	bls.n	400a50 <system_init_flash+0x3c>
      {
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
      }
      else
      {
        if ( ul_clk < CHIP_FREQ_FWS_3 )
  400a26:	4b11      	ldr	r3, [pc, #68]	; (400a6c <system_init_flash+0x58>)
  400a28:	4298      	cmp	r0, r3
  400a2a:	d915      	bls.n	400a58 <system_init_flash+0x44>
        {
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
        }
        else
        {
          if ( ul_clk < CHIP_FREQ_FWS_4 )
  400a2c:	4b10      	ldr	r3, [pc, #64]	; (400a70 <system_init_flash+0x5c>)
  400a2e:	4298      	cmp	r0, r3
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(4)|EEFC_FMR_CLOE;
  400a30:	bf94      	ite	ls
  400a32:	f04f 2204 	movls.w	r2, #67109888	; 0x4000400
          }
          else
          {
            EFC->EEFC_FMR = EEFC_FMR_FWS(5)|EEFC_FMR_CLOE;
  400a36:	4a0f      	ldrhi	r2, [pc, #60]	; (400a74 <system_init_flash+0x60>)
  400a38:	4b0f      	ldr	r3, [pc, #60]	; (400a78 <system_init_flash+0x64>)
  400a3a:	601a      	str	r2, [r3, #0]
  400a3c:	4770      	bx	lr
    EFC->EEFC_FMR = EEFC_FMR_FWS(0)|EEFC_FMR_CLOE;
  400a3e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
  400a42:	4b0d      	ldr	r3, [pc, #52]	; (400a78 <system_init_flash+0x64>)
  400a44:	601a      	str	r2, [r3, #0]
  400a46:	4770      	bx	lr
      EFC->EEFC_FMR = EEFC_FMR_FWS(1)|EEFC_FMR_CLOE;
  400a48:	4a0c      	ldr	r2, [pc, #48]	; (400a7c <system_init_flash+0x68>)
  400a4a:	4b0b      	ldr	r3, [pc, #44]	; (400a78 <system_init_flash+0x64>)
  400a4c:	601a      	str	r2, [r3, #0]
  400a4e:	4770      	bx	lr
        EFC->EEFC_FMR = EEFC_FMR_FWS(2)|EEFC_FMR_CLOE;
  400a50:	4a0b      	ldr	r2, [pc, #44]	; (400a80 <system_init_flash+0x6c>)
  400a52:	4b09      	ldr	r3, [pc, #36]	; (400a78 <system_init_flash+0x64>)
  400a54:	601a      	str	r2, [r3, #0]
  400a56:	4770      	bx	lr
          EFC->EEFC_FMR = EEFC_FMR_FWS(3)|EEFC_FMR_CLOE;
  400a58:	4a0a      	ldr	r2, [pc, #40]	; (400a84 <system_init_flash+0x70>)
  400a5a:	4b07      	ldr	r3, [pc, #28]	; (400a78 <system_init_flash+0x64>)
  400a5c:	601a      	str	r2, [r3, #0]
  400a5e:	4770      	bx	lr
  400a60:	01312cff 	.word	0x01312cff
  400a64:	026259ff 	.word	0x026259ff
  400a68:	039386ff 	.word	0x039386ff
  400a6c:	04c4b3ff 	.word	0x04c4b3ff
  400a70:	05f5e0ff 	.word	0x05f5e0ff
  400a74:	04000500 	.word	0x04000500
  400a78:	400e0c00 	.word	0x400e0c00
  400a7c:	04000100 	.word	0x04000100
  400a80:	04000200 	.word	0x04000200
  400a84:	04000300 	.word	0x04000300

00400a88 <but_callback>:
/************************************************************************/
/* interrupcoes                                                         */
/************************************************************************/

void but_callback(void){
	but_flag = !but_flag;
  400a88:	4a03      	ldr	r2, [pc, #12]	; (400a98 <but_callback+0x10>)
  400a8a:	7813      	ldrb	r3, [r2, #0]
  400a8c:	fab3 f383 	clz	r3, r3
  400a90:	095b      	lsrs	r3, r3, #5
  400a92:	7013      	strb	r3, [r2, #0]
  400a94:	4770      	bx	lr
  400a96:	bf00      	nop
  400a98:	20400f5c 	.word	0x20400f5c

00400a9c <buzz>:

/************************************************************************/
/* funcoes                                                              */
/************************************************************************/

void buzz(Musica musica, long frequency, long length){
  400a9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400aa0:	b085      	sub	sp, #20
  400aa2:	ac04      	add	r4, sp, #16
  400aa4:	e904 0003 	stmdb	r4, {r0, r1}
  400aa8:	4614      	mov	r4, r2
  400aaa:	461e      	mov	r6, r3
  400aac:	9d02      	ldr	r5, [sp, #8]
		
	pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);
  400aae:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400ab2:	489a      	ldr	r0, [pc, #616]	; (400d1c <buzz+0x280>)
  400ab4:	4b9a      	ldr	r3, [pc, #616]	; (400d20 <buzz+0x284>)
  400ab6:	4798      	blx	r3
	
	if(musica.num_mus == 1){
  400ab8:	2d01      	cmp	r5, #1
  400aba:	d00c      	beq.n	400ad6 <buzz+0x3a>
			pio_set(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK);
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);    
			delay_us(delayValue);                          
		}
	}
	else if(musica.num_mus == 2){
  400abc:	2d02      	cmp	r5, #2
  400abe:	d06a      	beq.n	400b96 <buzz+0xfa>
			pio_set(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);   
			delay_us(delayValue);                           
		}
	}
	else if(musica.num_mus == 3){
  400ac0:	2d03      	cmp	r5, #3
  400ac2:	f000 80c9 	beq.w	400c58 <buzz+0x1bc>
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);    
			delay_us(delayValue);                        
		}
	}
	
	pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);	
  400ac6:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400aca:	4894      	ldr	r0, [pc, #592]	; (400d1c <buzz+0x280>)
  400acc:	4b94      	ldr	r3, [pc, #592]	; (400d20 <buzz+0x284>)
  400ace:	4798      	blx	r3
}
  400ad0:	b005      	add	sp, #20
  400ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		long delayValue = 1000000 / frequency / 2;
  400ad6:	4b93      	ldr	r3, [pc, #588]	; (400d24 <buzz+0x288>)
  400ad8:	fb93 faf4 	sdiv	sl, r3, r4
		long numCycles = frequency * length / 1000;
  400adc:	fb06 f404 	mul.w	r4, r6, r4
  400ae0:	4b91      	ldr	r3, [pc, #580]	; (400d28 <buzz+0x28c>)
  400ae2:	fb83 2304 	smull	r2, r3, r3, r4
  400ae6:	17e4      	asrs	r4, r4, #31
  400ae8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
		for (long i = 0; i < numCycles; i++) {
  400aec:	2c00      	cmp	r4, #0
  400aee:	ddea      	ble.n	400ac6 <buzz+0x2a>
			delay_us(delayValue);                    
  400af0:	4d8e      	ldr	r5, [pc, #568]	; (400d2c <buzz+0x290>)
  400af2:	fbaa 0105 	umull	r0, r1, sl, r5
  400af6:	4652      	mov	r2, sl
  400af8:	17d3      	asrs	r3, r2, #31
  400afa:	fb05 1103 	mla	r1, r5, r3, r1
  400afe:	4a8c      	ldr	r2, [pc, #560]	; (400d30 <buzz+0x294>)
  400b00:	2300      	movs	r3, #0
  400b02:	4e8c      	ldr	r6, [pc, #560]	; (400d34 <buzz+0x298>)
  400b04:	2700      	movs	r7, #0
  400b06:	1980      	adds	r0, r0, r6
  400b08:	4179      	adcs	r1, r7
  400b0a:	4d8b      	ldr	r5, [pc, #556]	; (400d38 <buzz+0x29c>)
  400b0c:	47a8      	blx	r5
  400b0e:	9001      	str	r0, [sp, #4]
  400b10:	2500      	movs	r5, #0
			if(but_flag == 1){
  400b12:	f8df b23c 	ldr.w	fp, [pc, #572]	; 400d50 <buzz+0x2b4>
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  400b16:	4e89      	ldr	r6, [pc, #548]	; (400d3c <buzz+0x2a0>)
  400b18:	f8df 8204 	ldr.w	r8, [pc, #516]	; 400d20 <buzz+0x284>
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400b1c:	4f88      	ldr	r7, [pc, #544]	; (400d40 <buzz+0x2a4>)
			pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);     
  400b1e:	46a1      	mov	r9, r4
  400b20:	e01b      	b.n	400b5a <buzz+0xbe>
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  400b22:	f44f 7180 	mov.w	r1, #256	; 0x100
  400b26:	4630      	mov	r0, r6
  400b28:	47c0      	blx	r8
				pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  400b2a:	2002      	movs	r0, #2
  400b2c:	4b85      	ldr	r3, [pc, #532]	; (400d44 <buzz+0x2a8>)
  400b2e:	4798      	blx	r3
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400b30:	f44f 7180 	mov.w	r1, #256	; 0x100
  400b34:	4630      	mov	r0, r6
  400b36:	47b8      	blx	r7
  400b38:	e014      	b.n	400b64 <buzz+0xc8>
			delay_us(delayValue);                    
  400b3a:	2033      	movs	r0, #51	; 0x33
  400b3c:	4c82      	ldr	r4, [pc, #520]	; (400d48 <buzz+0x2ac>)
  400b3e:	47a0      	blx	r4
			pio_set(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK);
  400b40:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b44:	4630      	mov	r0, r6
  400b46:	47b8      	blx	r7
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);    
  400b48:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b4c:	4873      	ldr	r0, [pc, #460]	; (400d1c <buzz+0x280>)
  400b4e:	47c0      	blx	r8
			delay_us(delayValue);                          
  400b50:	2033      	movs	r0, #51	; 0x33
  400b52:	47a0      	blx	r4
		for (long i = 0; i < numCycles; i++) {
  400b54:	3501      	adds	r5, #1
  400b56:	45a9      	cmp	r9, r5
  400b58:	d0b5      	beq.n	400ac6 <buzz+0x2a>
			if(but_flag == 1){
  400b5a:	f89b 3000 	ldrb.w	r3, [fp]
  400b5e:	b2db      	uxtb	r3, r3
  400b60:	2b01      	cmp	r3, #1
  400b62:	d0de      	beq.n	400b22 <buzz+0x86>
			pio_clear(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK);
  400b64:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b68:	4630      	mov	r0, r6
  400b6a:	47c0      	blx	r8
			pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);     
  400b6c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b70:	486a      	ldr	r0, [pc, #424]	; (400d1c <buzz+0x280>)
  400b72:	47b8      	blx	r7
			delay_us(delayValue);                    
  400b74:	f1ba 0f00 	cmp.w	sl, #0
  400b78:	d0df      	beq.n	400b3a <buzz+0x9e>
  400b7a:	9801      	ldr	r0, [sp, #4]
  400b7c:	4c72      	ldr	r4, [pc, #456]	; (400d48 <buzz+0x2ac>)
  400b7e:	47a0      	blx	r4
			pio_set(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK);
  400b80:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b84:	4630      	mov	r0, r6
  400b86:	47b8      	blx	r7
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);    
  400b88:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400b8c:	4863      	ldr	r0, [pc, #396]	; (400d1c <buzz+0x280>)
  400b8e:	47c0      	blx	r8
			delay_us(delayValue);                          
  400b90:	9801      	ldr	r0, [sp, #4]
  400b92:	47a0      	blx	r4
  400b94:	e7de      	b.n	400b54 <buzz+0xb8>
		long delayValue = 1000000 / frequency / 2;
  400b96:	4b63      	ldr	r3, [pc, #396]	; (400d24 <buzz+0x288>)
  400b98:	fb93 faf4 	sdiv	sl, r3, r4
		long numCycles = frequency * length / 600;
  400b9c:	fb06 f404 	mul.w	r4, r6, r4
  400ba0:	4b6a      	ldr	r3, [pc, #424]	; (400d4c <buzz+0x2b0>)
  400ba2:	fb83 2304 	smull	r2, r3, r3, r4
  400ba6:	17e4      	asrs	r4, r4, #31
  400ba8:	ebc4 14a3 	rsb	r4, r4, r3, asr #6
		for (long i = 0; i < numCycles; i++) {
  400bac:	2c00      	cmp	r4, #0
  400bae:	dd8a      	ble.n	400ac6 <buzz+0x2a>
			delay_us(delayValue);                   
  400bb0:	4d5e      	ldr	r5, [pc, #376]	; (400d2c <buzz+0x290>)
  400bb2:	fbaa 0105 	umull	r0, r1, sl, r5
  400bb6:	4652      	mov	r2, sl
  400bb8:	17d3      	asrs	r3, r2, #31
  400bba:	fb05 1103 	mla	r1, r5, r3, r1
  400bbe:	4a5c      	ldr	r2, [pc, #368]	; (400d30 <buzz+0x294>)
  400bc0:	2300      	movs	r3, #0
  400bc2:	4e5c      	ldr	r6, [pc, #368]	; (400d34 <buzz+0x298>)
  400bc4:	2700      	movs	r7, #0
  400bc6:	1980      	adds	r0, r0, r6
  400bc8:	4179      	adcs	r1, r7
  400bca:	4d5b      	ldr	r5, [pc, #364]	; (400d38 <buzz+0x29c>)
  400bcc:	47a8      	blx	r5
  400bce:	9001      	str	r0, [sp, #4]
  400bd0:	2500      	movs	r5, #0
			if(but_flag == 1){
  400bd2:	f8df b17c 	ldr.w	fp, [pc, #380]	; 400d50 <buzz+0x2b4>
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  400bd6:	4f52      	ldr	r7, [pc, #328]	; (400d20 <buzz+0x284>)
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400bd8:	4e59      	ldr	r6, [pc, #356]	; (400d40 <buzz+0x2a4>)
			pio_clear(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
  400bda:	f8df 8178 	ldr.w	r8, [pc, #376]	; 400d54 <buzz+0x2b8>
			pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);     
  400bde:	46a1      	mov	r9, r4
  400be0:	e01c      	b.n	400c1c <buzz+0x180>
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  400be2:	f44f 7180 	mov.w	r1, #256	; 0x100
  400be6:	4855      	ldr	r0, [pc, #340]	; (400d3c <buzz+0x2a0>)
  400be8:	47b8      	blx	r7
				pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  400bea:	2002      	movs	r0, #2
  400bec:	4b55      	ldr	r3, [pc, #340]	; (400d44 <buzz+0x2a8>)
  400bee:	4798      	blx	r3
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400bf0:	f44f 7180 	mov.w	r1, #256	; 0x100
  400bf4:	4851      	ldr	r0, [pc, #324]	; (400d3c <buzz+0x2a0>)
  400bf6:	47b0      	blx	r6
  400bf8:	e015      	b.n	400c26 <buzz+0x18a>
			delay_us(delayValue);                   
  400bfa:	2033      	movs	r0, #51	; 0x33
  400bfc:	4c52      	ldr	r4, [pc, #328]	; (400d48 <buzz+0x2ac>)
  400bfe:	47a0      	blx	r4
			pio_set(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
  400c00:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400c04:	4640      	mov	r0, r8
  400c06:	47b0      	blx	r6
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);   
  400c08:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c0c:	4843      	ldr	r0, [pc, #268]	; (400d1c <buzz+0x280>)
  400c0e:	47b8      	blx	r7
			delay_us(delayValue);                           
  400c10:	2033      	movs	r0, #51	; 0x33
  400c12:	47a0      	blx	r4
		for (long i = 0; i < numCycles; i++) {
  400c14:	3501      	adds	r5, #1
  400c16:	45a9      	cmp	r9, r5
  400c18:	f43f af55 	beq.w	400ac6 <buzz+0x2a>
			if(but_flag == 1){
  400c1c:	f89b 3000 	ldrb.w	r3, [fp]
  400c20:	b2db      	uxtb	r3, r3
  400c22:	2b01      	cmp	r3, #1
  400c24:	d0dd      	beq.n	400be2 <buzz+0x146>
			pio_clear(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
  400c26:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400c2a:	4640      	mov	r0, r8
  400c2c:	47b8      	blx	r7
			pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);     
  400c2e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c32:	483a      	ldr	r0, [pc, #232]	; (400d1c <buzz+0x280>)
  400c34:	47b0      	blx	r6
			delay_us(delayValue);                   
  400c36:	f1ba 0f00 	cmp.w	sl, #0
  400c3a:	d0de      	beq.n	400bfa <buzz+0x15e>
  400c3c:	9801      	ldr	r0, [sp, #4]
  400c3e:	4c42      	ldr	r4, [pc, #264]	; (400d48 <buzz+0x2ac>)
  400c40:	47a0      	blx	r4
			pio_set(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
  400c42:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400c46:	4640      	mov	r0, r8
  400c48:	47b0      	blx	r6
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);   
  400c4a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400c4e:	4833      	ldr	r0, [pc, #204]	; (400d1c <buzz+0x280>)
  400c50:	47b8      	blx	r7
			delay_us(delayValue);                           
  400c52:	9801      	ldr	r0, [sp, #4]
  400c54:	47a0      	blx	r4
  400c56:	e7dd      	b.n	400c14 <buzz+0x178>
		long delayValue = 1000000 / frequency / 2;
  400c58:	4b32      	ldr	r3, [pc, #200]	; (400d24 <buzz+0x288>)
  400c5a:	fb93 faf4 	sdiv	sl, r3, r4
		long numCycles = frequency * length / 600;
  400c5e:	fb06 f404 	mul.w	r4, r6, r4
  400c62:	4d3a      	ldr	r5, [pc, #232]	; (400d4c <buzz+0x2b0>)
  400c64:	fb85 3504 	smull	r3, r5, r5, r4
  400c68:	17e4      	asrs	r4, r4, #31
  400c6a:	ebc4 15a5 	rsb	r5, r4, r5, asr #6
		for (long i = 0; i < numCycles; i++) {
  400c6e:	2d00      	cmp	r5, #0
  400c70:	f77f af29 	ble.w	400ac6 <buzz+0x2a>
			delay_us(delayValue);                   
  400c74:	4c2d      	ldr	r4, [pc, #180]	; (400d2c <buzz+0x290>)
  400c76:	fbaa 0104 	umull	r0, r1, sl, r4
  400c7a:	4652      	mov	r2, sl
  400c7c:	17d3      	asrs	r3, r2, #31
  400c7e:	fb04 1103 	mla	r1, r4, r3, r1
  400c82:	4a2b      	ldr	r2, [pc, #172]	; (400d30 <buzz+0x294>)
  400c84:	2300      	movs	r3, #0
  400c86:	4e2b      	ldr	r6, [pc, #172]	; (400d34 <buzz+0x298>)
  400c88:	2700      	movs	r7, #0
  400c8a:	1980      	adds	r0, r0, r6
  400c8c:	4179      	adcs	r1, r7
  400c8e:	4c2a      	ldr	r4, [pc, #168]	; (400d38 <buzz+0x29c>)
  400c90:	47a0      	blx	r4
  400c92:	9001      	str	r0, [sp, #4]
  400c94:	2400      	movs	r4, #0
			if(but_flag == 1){
  400c96:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 400d50 <buzz+0x2b4>
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  400c9a:	4f21      	ldr	r7, [pc, #132]	; (400d20 <buzz+0x284>)
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400c9c:	4e28      	ldr	r6, [pc, #160]	; (400d40 <buzz+0x2a4>)
			pio_clear(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK);
  400c9e:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 400d54 <buzz+0x2b8>
			pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);      
  400ca2:	46a9      	mov	r9, r5
  400ca4:	e01c      	b.n	400ce0 <buzz+0x244>
				pio_clear(LED_PIO, LED_PIO_IDX_MASK);
  400ca6:	f44f 7180 	mov.w	r1, #256	; 0x100
  400caa:	4824      	ldr	r0, [pc, #144]	; (400d3c <buzz+0x2a0>)
  400cac:	47b8      	blx	r7
				pmc_sleep(SAM_PM_SMODE_SLEEP_WFI);
  400cae:	2002      	movs	r0, #2
  400cb0:	4b24      	ldr	r3, [pc, #144]	; (400d44 <buzz+0x2a8>)
  400cb2:	4798      	blx	r3
				pio_set(LED_PIO, LED_PIO_IDX_MASK);
  400cb4:	f44f 7180 	mov.w	r1, #256	; 0x100
  400cb8:	4820      	ldr	r0, [pc, #128]	; (400d3c <buzz+0x2a0>)
  400cba:	47b0      	blx	r6
  400cbc:	e015      	b.n	400cea <buzz+0x24e>
			delay_us(delayValue);                   
  400cbe:	2033      	movs	r0, #51	; 0x33
  400cc0:	4d21      	ldr	r5, [pc, #132]	; (400d48 <buzz+0x2ac>)
  400cc2:	47a8      	blx	r5
			pio_set(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK);
  400cc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400cc8:	4640      	mov	r0, r8
  400cca:	47b0      	blx	r6
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);    
  400ccc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400cd0:	4812      	ldr	r0, [pc, #72]	; (400d1c <buzz+0x280>)
  400cd2:	47b8      	blx	r7
			delay_us(delayValue);                        
  400cd4:	2033      	movs	r0, #51	; 0x33
  400cd6:	47a8      	blx	r5
		for (long i = 0; i < numCycles; i++) {
  400cd8:	3401      	adds	r4, #1
  400cda:	45a1      	cmp	r9, r4
  400cdc:	f43f aef3 	beq.w	400ac6 <buzz+0x2a>
			if(but_flag == 1){
  400ce0:	f89b 3000 	ldrb.w	r3, [fp]
  400ce4:	b2db      	uxtb	r3, r3
  400ce6:	2b01      	cmp	r3, #1
  400ce8:	d0dd      	beq.n	400ca6 <buzz+0x20a>
			pio_clear(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK);
  400cea:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400cee:	4640      	mov	r0, r8
  400cf0:	47b8      	blx	r7
			pio_set(BUZ_PIO, BUZ_PIO_IDX_MASK);      
  400cf2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400cf6:	4809      	ldr	r0, [pc, #36]	; (400d1c <buzz+0x280>)
  400cf8:	47b0      	blx	r6
			delay_us(delayValue);                   
  400cfa:	f1ba 0f00 	cmp.w	sl, #0
  400cfe:	d0de      	beq.n	400cbe <buzz+0x222>
  400d00:	9801      	ldr	r0, [sp, #4]
  400d02:	4d11      	ldr	r5, [pc, #68]	; (400d48 <buzz+0x2ac>)
  400d04:	47a8      	blx	r5
			pio_set(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK);
  400d06:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400d0a:	4640      	mov	r0, r8
  400d0c:	47b0      	blx	r6
			pio_clear(BUZ_PIO, BUZ_PIO_IDX_MASK);    
  400d0e:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  400d12:	4802      	ldr	r0, [pc, #8]	; (400d1c <buzz+0x280>)
  400d14:	47b8      	blx	r7
			delay_us(delayValue);                        
  400d16:	9801      	ldr	r0, [sp, #4]
  400d18:	47a8      	blx	r5
  400d1a:	e7dd      	b.n	400cd8 <buzz+0x23c>
  400d1c:	400e0e00 	.word	0x400e0e00
  400d20:	0040022b 	.word	0x0040022b
  400d24:	0007a120 	.word	0x0007a120
  400d28:	10624dd3 	.word	0x10624dd3
  400d2c:	11e1a300 	.word	0x11e1a300
  400d30:	005a83e0 	.word	0x005a83e0
  400d34:	005a83df 	.word	0x005a83df
  400d38:	00401999 	.word	0x00401999
  400d3c:	400e1200 	.word	0x400e1200
  400d40:	00400227 	.word	0x00400227
  400d44:	004005cd 	.word	0x004005cd
  400d48:	20400001 	.word	0x20400001
  400d4c:	1b4e81b5 	.word	0x1b4e81b5
  400d50:	20400f5c 	.word	0x20400f5c
  400d54:	400e1400 	.word	0x400e1400

00400d58 <sing>:

void sing(Musica musica){
  400d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  400d5c:	b085      	sub	sp, #20
  400d5e:	ab04      	add	r3, sp, #16
  400d60:	e903 0003 	stmdb	r3, {r0, r1}
  400d64:	9b02      	ldr	r3, [sp, #8]
	if(musica.num_mus == 1){
  400d66:	2b01      	cmp	r3, #1
  400d68:	d007      	beq.n	400d7a <sing+0x22>
			delay_us(pauseBetweenNotes);
	
			buzz(musica ,0, noteDuration);
		}		
	}
	else if(musica.num_mus == 2){
  400d6a:	2b02      	cmp	r3, #2
  400d6c:	d054      	beq.n	400e18 <sing+0xc0>
			delay_us(pauseBetweenNotes);
			
			buzz(musica ,0, noteDuration);
		}
	}
	else if(musica.num_mus == 3){
  400d6e:	2b03      	cmp	r3, #3
  400d70:	f000 80a1 	beq.w	400eb6 <sing+0x15e>
			delay_us(pauseBetweenNotes);
			
			buzz(musica ,0, noteDuration);
		}
	}
}
  400d74:	b005      	add	sp, #20
  400d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  400d7a:	4b75      	ldr	r3, [pc, #468]	; (400f50 <sing+0x1f8>)
  400d7c:	1f1e      	subs	r6, r3, #4
  400d7e:	f8df 9204 	ldr.w	r9, [pc, #516]	; 400f84 <sing+0x22c>
  400d82:	f503 739a 	add.w	r3, r3, #308	; 0x134
  400d86:	9301      	str	r3, [sp, #4]
			buzz(musica, melody[thisNote],  noteDuration);
  400d88:	f04f 0801 	mov.w	r8, #1
  400d8c:	ad02      	add	r5, sp, #8
  400d8e:	e00d      	b.n	400dac <sing+0x54>
			delay_us(pauseBetweenNotes);
  400d90:	2033      	movs	r0, #51	; 0x33
  400d92:	4b70      	ldr	r3, [pc, #448]	; (400f54 <sing+0x1fc>)
  400d94:	4798      	blx	r3
			buzz(musica ,0, noteDuration);
  400d96:	f8cd 8008 	str.w	r8, [sp, #8]
  400d9a:	4623      	mov	r3, r4
  400d9c:	2200      	movs	r2, #0
  400d9e:	e895 0003 	ldmia.w	r5, {r0, r1}
  400da2:	4c6d      	ldr	r4, [pc, #436]	; (400f58 <sing+0x200>)
  400da4:	47a0      	blx	r4
		for (int thisNote = 0; thisNote < size ; thisNote ++) {
  400da6:	9b01      	ldr	r3, [sp, #4]
  400da8:	429e      	cmp	r6, r3
  400daa:	d0e3      	beq.n	400d74 <sing+0x1c>
			int noteDuration = 2000 / tempo[thisNote];
  400dac:	f856 3f04 	ldr.w	r3, [r6, #4]!
  400db0:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  400db4:	fb94 f4f3 	sdiv	r4, r4, r3
			buzz(musica, melody[thisNote],  noteDuration);
  400db8:	f859 2f04 	ldr.w	r2, [r9, #4]!
  400dbc:	f8cd 8008 	str.w	r8, [sp, #8]
  400dc0:	4623      	mov	r3, r4
  400dc2:	e895 0003 	ldmia.w	r5, {r0, r1}
  400dc6:	4f64      	ldr	r7, [pc, #400]	; (400f58 <sing+0x200>)
  400dc8:	47b8      	blx	r7
			int pauseBetweenNotes = noteDuration*1.3;
  400dca:	4620      	mov	r0, r4
  400dcc:	4b63      	ldr	r3, [pc, #396]	; (400f5c <sing+0x204>)
  400dce:	4798      	blx	r3
  400dd0:	a35d      	add	r3, pc, #372	; (adr r3, 400f48 <sing+0x1f0>)
  400dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
  400dd6:	f8df a19c 	ldr.w	sl, [pc, #412]	; 400f74 <sing+0x21c>
  400dda:	47d0      	blx	sl
  400ddc:	4b60      	ldr	r3, [pc, #384]	; (400f60 <sing+0x208>)
  400dde:	4798      	blx	r3
			delay_us(pauseBetweenNotes);
  400de0:	4601      	mov	r1, r0
  400de2:	2800      	cmp	r0, #0
  400de4:	d0d4      	beq.n	400d90 <sing+0x38>
  400de6:	17c3      	asrs	r3, r0, #31
  400de8:	485e      	ldr	r0, [pc, #376]	; (400f64 <sing+0x20c>)
  400dea:	fba1 0100 	umull	r0, r1, r1, r0
  400dee:	4f5d      	ldr	r7, [pc, #372]	; (400f64 <sing+0x20c>)
  400df0:	fb07 1103 	mla	r1, r7, r3, r1
  400df4:	4a5c      	ldr	r2, [pc, #368]	; (400f68 <sing+0x210>)
  400df6:	2300      	movs	r3, #0
  400df8:	f8df a180 	ldr.w	sl, [pc, #384]	; 400f7c <sing+0x224>
  400dfc:	f04f 0b00 	mov.w	fp, #0
  400e00:	eb1a 0a00 	adds.w	sl, sl, r0
  400e04:	eb4b 0b01 	adc.w	fp, fp, r1
  400e08:	4650      	mov	r0, sl
  400e0a:	4659      	mov	r1, fp
  400e0c:	f8df a170 	ldr.w	sl, [pc, #368]	; 400f80 <sing+0x228>
  400e10:	47d0      	blx	sl
  400e12:	4b50      	ldr	r3, [pc, #320]	; (400f54 <sing+0x1fc>)
  400e14:	4798      	blx	r3
  400e16:	e7be      	b.n	400d96 <sing+0x3e>
  400e18:	4b54      	ldr	r3, [pc, #336]	; (400f6c <sing+0x214>)
  400e1a:	1f1e      	subs	r6, r3, #4
  400e1c:	f8df 9168 	ldr.w	r9, [pc, #360]	; 400f88 <sing+0x230>
  400e20:	33dc      	adds	r3, #220	; 0xdc
  400e22:	9301      	str	r3, [sp, #4]
			buzz(musica, underworld_melody[thisNote]*4,  noteDuration);
  400e24:	f04f 0802 	mov.w	r8, #2
  400e28:	ad02      	add	r5, sp, #8
  400e2a:	e00d      	b.n	400e48 <sing+0xf0>
			delay_us(pauseBetweenNotes);
  400e2c:	2033      	movs	r0, #51	; 0x33
  400e2e:	4b49      	ldr	r3, [pc, #292]	; (400f54 <sing+0x1fc>)
  400e30:	4798      	blx	r3
			buzz(musica ,0, noteDuration);
  400e32:	f8cd 8008 	str.w	r8, [sp, #8]
  400e36:	4623      	mov	r3, r4
  400e38:	2200      	movs	r2, #0
  400e3a:	e895 0003 	ldmia.w	r5, {r0, r1}
  400e3e:	4c46      	ldr	r4, [pc, #280]	; (400f58 <sing+0x200>)
  400e40:	47a0      	blx	r4
		for (int thisNote = 0; thisNote < size ; thisNote ++) {
  400e42:	9b01      	ldr	r3, [sp, #4]
  400e44:	429e      	cmp	r6, r3
  400e46:	d095      	beq.n	400d74 <sing+0x1c>
			int noteDuration = 2000 / underworld_tempo[thisNote];
  400e48:	f856 3f04 	ldr.w	r3, [r6, #4]!
  400e4c:	f44f 64fa 	mov.w	r4, #2000	; 0x7d0
  400e50:	fb94 f4f3 	sdiv	r4, r4, r3
			buzz(musica, underworld_melody[thisNote]*4,  noteDuration);
  400e54:	f859 2f04 	ldr.w	r2, [r9, #4]!
  400e58:	f8cd 8008 	str.w	r8, [sp, #8]
  400e5c:	4623      	mov	r3, r4
  400e5e:	0092      	lsls	r2, r2, #2
  400e60:	e895 0003 	ldmia.w	r5, {r0, r1}
  400e64:	4f3c      	ldr	r7, [pc, #240]	; (400f58 <sing+0x200>)
  400e66:	47b8      	blx	r7
			int pauseBetweenNotes = noteDuration*1.3;
  400e68:	4620      	mov	r0, r4
  400e6a:	4b3c      	ldr	r3, [pc, #240]	; (400f5c <sing+0x204>)
  400e6c:	4798      	blx	r3
  400e6e:	a336      	add	r3, pc, #216	; (adr r3, 400f48 <sing+0x1f0>)
  400e70:	e9d3 2300 	ldrd	r2, r3, [r3]
  400e74:	f8df a0fc 	ldr.w	sl, [pc, #252]	; 400f74 <sing+0x21c>
  400e78:	47d0      	blx	sl
  400e7a:	4b39      	ldr	r3, [pc, #228]	; (400f60 <sing+0x208>)
  400e7c:	4798      	blx	r3
			delay_us(pauseBetweenNotes);
  400e7e:	4601      	mov	r1, r0
  400e80:	2800      	cmp	r0, #0
  400e82:	d0d3      	beq.n	400e2c <sing+0xd4>
  400e84:	17c3      	asrs	r3, r0, #31
  400e86:	4837      	ldr	r0, [pc, #220]	; (400f64 <sing+0x20c>)
  400e88:	fba1 0100 	umull	r0, r1, r1, r0
  400e8c:	4f35      	ldr	r7, [pc, #212]	; (400f64 <sing+0x20c>)
  400e8e:	fb07 1103 	mla	r1, r7, r3, r1
  400e92:	4a35      	ldr	r2, [pc, #212]	; (400f68 <sing+0x210>)
  400e94:	2300      	movs	r3, #0
  400e96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 400f7c <sing+0x224>
  400e9a:	f04f 0b00 	mov.w	fp, #0
  400e9e:	eb1a 0a00 	adds.w	sl, sl, r0
  400ea2:	eb4b 0b01 	adc.w	fp, fp, r1
  400ea6:	4650      	mov	r0, sl
  400ea8:	4659      	mov	r1, fp
  400eaa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 400f80 <sing+0x228>
  400eae:	47d0      	blx	sl
  400eb0:	4b28      	ldr	r3, [pc, #160]	; (400f54 <sing+0x1fc>)
  400eb2:	4798      	blx	r3
  400eb4:	e7bd      	b.n	400e32 <sing+0xda>
  400eb6:	4b2e      	ldr	r3, [pc, #184]	; (400f70 <sing+0x218>)
  400eb8:	1f1d      	subs	r5, r3, #4
  400eba:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 400f8c <sing+0x234>
  400ebe:	f503 7b4a 	add.w	fp, r3, #808	; 0x328
			int noteDuration = pirate_tempo[thisNote]*0.75;
  400ec2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 400f5c <sing+0x204>
			buzz(musica, pirate_notes[thisNote],  noteDuration);
  400ec6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 400f58 <sing+0x200>
			delay_us(pauseBetweenNotes);
  400eca:	4c26      	ldr	r4, [pc, #152]	; (400f64 <sing+0x20c>)
  400ecc:	e00d      	b.n	400eea <sing+0x192>
  400ece:	2033      	movs	r0, #51	; 0x33
  400ed0:	4b20      	ldr	r3, [pc, #128]	; (400f54 <sing+0x1fc>)
  400ed2:	4798      	blx	r3
			buzz(musica ,0, noteDuration);
  400ed4:	a904      	add	r1, sp, #16
  400ed6:	2303      	movs	r3, #3
  400ed8:	f841 3d08 	str.w	r3, [r1, #-8]!
  400edc:	9b01      	ldr	r3, [sp, #4]
  400ede:	2200      	movs	r2, #0
  400ee0:	c903      	ldmia	r1, {r0, r1}
  400ee2:	47c0      	blx	r8
		for (int thisNote = 0; thisNote < size ; thisNote ++) {
  400ee4:	455d      	cmp	r5, fp
  400ee6:	f43f af45 	beq.w	400d74 <sing+0x1c>
			int noteDuration = pirate_tempo[thisNote]*0.75;
  400eea:	f855 0f04 	ldr.w	r0, [r5, #4]!
  400eee:	47c8      	blx	r9
  400ef0:	4f20      	ldr	r7, [pc, #128]	; (400f74 <sing+0x21c>)
  400ef2:	2200      	movs	r2, #0
  400ef4:	4b20      	ldr	r3, [pc, #128]	; (400f78 <sing+0x220>)
  400ef6:	47b8      	blx	r7
  400ef8:	4e19      	ldr	r6, [pc, #100]	; (400f60 <sing+0x208>)
  400efa:	47b0      	blx	r6
			buzz(musica, pirate_notes[thisNote],  noteDuration);
  400efc:	f85a 2f04 	ldr.w	r2, [sl, #4]!
  400f00:	a904      	add	r1, sp, #16
  400f02:	2303      	movs	r3, #3
  400f04:	f841 3d08 	str.w	r3, [r1, #-8]!
  400f08:	9001      	str	r0, [sp, #4]
  400f0a:	4603      	mov	r3, r0
  400f0c:	c903      	ldmia	r1, {r0, r1}
  400f0e:	47c0      	blx	r8
			int pauseBetweenNotes = noteDuration*1.3;
  400f10:	9801      	ldr	r0, [sp, #4]
  400f12:	47c8      	blx	r9
  400f14:	a30c      	add	r3, pc, #48	; (adr r3, 400f48 <sing+0x1f0>)
  400f16:	e9d3 2300 	ldrd	r2, r3, [r3]
  400f1a:	47b8      	blx	r7
  400f1c:	47b0      	blx	r6
			delay_us(pauseBetweenNotes);
  400f1e:	2800      	cmp	r0, #0
  400f20:	d0d5      	beq.n	400ece <sing+0x176>
  400f22:	17c3      	asrs	r3, r0, #31
  400f24:	fba0 0104 	umull	r0, r1, r0, r4
  400f28:	fb04 1103 	mla	r1, r4, r3, r1
  400f2c:	4a0e      	ldr	r2, [pc, #56]	; (400f68 <sing+0x210>)
  400f2e:	2300      	movs	r3, #0
  400f30:	4e12      	ldr	r6, [pc, #72]	; (400f7c <sing+0x224>)
  400f32:	2700      	movs	r7, #0
  400f34:	1836      	adds	r6, r6, r0
  400f36:	414f      	adcs	r7, r1
  400f38:	4630      	mov	r0, r6
  400f3a:	4639      	mov	r1, r7
  400f3c:	4e10      	ldr	r6, [pc, #64]	; (400f80 <sing+0x228>)
  400f3e:	47b0      	blx	r6
  400f40:	4b04      	ldr	r3, [pc, #16]	; (400f54 <sing+0x1fc>)
  400f42:	4798      	blx	r3
  400f44:	e7c6      	b.n	400ed4 <sing+0x17c>
  400f46:	bf00      	nop
  400f48:	cccccccd 	.word	0xcccccccd
  400f4c:	3ff4cccc 	.word	0x3ff4cccc
  400f50:	204007a0 	.word	0x204007a0
  400f54:	20400001 	.word	0x20400001
  400f58:	00400a9d 	.word	0x00400a9d
  400f5c:	00401459 	.word	0x00401459
  400f60:	00401949 	.word	0x00401949
  400f64:	11e1a300 	.word	0x11e1a300
  400f68:	005a83e0 	.word	0x005a83e0
  400f6c:	204009b8 	.word	0x204009b8
  400f70:	20400474 	.word	0x20400474
  400f74:	00401525 	.word	0x00401525
  400f78:	3fe80000 	.word	0x3fe80000
  400f7c:	005a83df 	.word	0x005a83df
  400f80:	00401999 	.word	0x00401999
  400f84:	2040000c 	.word	0x2040000c
  400f88:	204008d4 	.word	0x204008d4
  400f8c:	20400144 	.word	0x20400144

00400f90 <init>:

// Função de inicialização do uC
void init(void){
  400f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  400f94:	b082      	sub	sp, #8
	sysclk_init();
  400f96:	4b44      	ldr	r3, [pc, #272]	; (4010a8 <init+0x118>)
  400f98:	4798      	blx	r3
  
	WDT->WDT_MR = WDT_MR_WDDIS;
  400f9a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
  400f9e:	4b43      	ldr	r3, [pc, #268]	; (4010ac <init+0x11c>)
  400fa0:	605a      	str	r2, [r3, #4]

	pmc_enable_periph_clk(LED_PIO_ID);
  400fa2:	200c      	movs	r0, #12
  400fa4:	4c42      	ldr	r4, [pc, #264]	; (4010b0 <init+0x120>)
  400fa6:	47a0      	blx	r4
	pmc_enable_periph_clk(LED3_PLACA_PIO_ID);
  400fa8:	2010      	movs	r0, #16
  400faa:	47a0      	blx	r4
	pmc_enable_periph_clk(LED2_PLACA_PIO_ID);
  400fac:	2010      	movs	r0, #16
  400fae:	47a0      	blx	r4
	pmc_enable_periph_clk(LED1_PLACA_PIO_ID);
  400fb0:	200c      	movs	r0, #12
  400fb2:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT_PIO_ID);
  400fb4:	200a      	movs	r0, #10
  400fb6:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT3_PIO_ID);
  400fb8:	200c      	movs	r0, #12
  400fba:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT2_PIO_ID);
  400fbc:	2010      	movs	r0, #16
  400fbe:	47a0      	blx	r4
	pmc_enable_periph_clk(BUT1_PIO_ID);
  400fc0:	200a      	movs	r0, #10
  400fc2:	47a0      	blx	r4
	pmc_enable_periph_clk(BUZ_PIO_ID);
  400fc4:	200a      	movs	r0, #10
  400fc6:	47a0      	blx	r4
	
	pio_set_output(LED_PIO, LED_PIO_IDX_MASK, 0, 0, 0);
  400fc8:	f8df 810c 	ldr.w	r8, [pc, #268]	; 4010d8 <init+0x148>
  400fcc:	2400      	movs	r4, #0
  400fce:	9400      	str	r4, [sp, #0]
  400fd0:	4623      	mov	r3, r4
  400fd2:	4622      	mov	r2, r4
  400fd4:	f44f 7180 	mov.w	r1, #256	; 0x100
  400fd8:	4640      	mov	r0, r8
  400fda:	4e36      	ldr	r6, [pc, #216]	; (4010b4 <init+0x124>)
  400fdc:	47b0      	blx	r6
	pio_set_output(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK, 0, 0, 0);
  400fde:	4f36      	ldr	r7, [pc, #216]	; (4010b8 <init+0x128>)
  400fe0:	9400      	str	r4, [sp, #0]
  400fe2:	4623      	mov	r3, r4
  400fe4:	4622      	mov	r2, r4
  400fe6:	f44f 6100 	mov.w	r1, #2048	; 0x800
  400fea:	4638      	mov	r0, r7
  400fec:	47b0      	blx	r6
	pio_set_output(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK, 0, 0, 0);
  400fee:	9400      	str	r4, [sp, #0]
  400ff0:	4623      	mov	r3, r4
  400ff2:	4622      	mov	r2, r4
  400ff4:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  400ff8:	4638      	mov	r0, r7
  400ffa:	47b0      	blx	r6
	pio_set_output(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK, 0, 0, 0);
  400ffc:	9400      	str	r4, [sp, #0]
  400ffe:	4623      	mov	r3, r4
  401000:	4622      	mov	r2, r4
  401002:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401006:	4640      	mov	r0, r8
  401008:	47b0      	blx	r6
	pio_set_output(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK, 0, 0, 0);
  40100a:	9400      	str	r4, [sp, #0]
  40100c:	4623      	mov	r3, r4
  40100e:	4622      	mov	r2, r4
  401010:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401014:	4638      	mov	r0, r7
  401016:	47b0      	blx	r6
	pio_set_output(BUZ_PIO, BUZ_PIO_IDX_MASK, 0, 0, 0);
  401018:	4d28      	ldr	r5, [pc, #160]	; (4010bc <init+0x12c>)
  40101a:	9400      	str	r4, [sp, #0]
  40101c:	4623      	mov	r3, r4
  40101e:	4622      	mov	r2, r4
  401020:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  401024:	4628      	mov	r0, r5
  401026:	47b0      	blx	r6
	
	pio_set_input(BUT_PIO, BUT_PIO_IDX_MASK, PIO_DEFAULT);
  401028:	4622      	mov	r2, r4
  40102a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40102e:	4628      	mov	r0, r5
  401030:	4e23      	ldr	r6, [pc, #140]	; (4010c0 <init+0x130>)
  401032:	47b0      	blx	r6
	pio_set_input(BUT3_PIO, BUT3_PIO_IDX_MASK, PIO_DEFAULT);
  401034:	4622      	mov	r2, r4
  401036:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  40103a:	4640      	mov	r0, r8
  40103c:	47b0      	blx	r6
	pio_set_input(BUT2_PIO, BUT2_PIO_IDX_MASK, PIO_DEFAULT);
  40103e:	4622      	mov	r2, r4
  401040:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  401044:	4638      	mov	r0, r7
  401046:	47b0      	blx	r6
	pio_set_input(BUT1_PIO, BUT1_PIO_IDX_MASK, PIO_DEFAULT);
  401048:	4622      	mov	r2, r4
  40104a:	2104      	movs	r1, #4
  40104c:	4628      	mov	r0, r5
  40104e:	47b0      	blx	r6
	
	pio_pull_up(BUT_PIO, BUT_PIO_IDX_MASK, 1);
  401050:	2201      	movs	r2, #1
  401052:	f44f 6100 	mov.w	r1, #2048	; 0x800
  401056:	4628      	mov	r0, r5
  401058:	4c1a      	ldr	r4, [pc, #104]	; (4010c4 <init+0x134>)
  40105a:	47a0      	blx	r4
	pio_pull_up(BUT3_PIO, BUT3_PIO_IDX_MASK, 1);
  40105c:	2201      	movs	r2, #1
  40105e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  401062:	4640      	mov	r0, r8
  401064:	47a0      	blx	r4
	pio_pull_up(BUT2_PIO, BUT2_PIO_IDX_MASK, 1);
  401066:	2201      	movs	r2, #1
  401068:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
  40106c:	4638      	mov	r0, r7
  40106e:	47a0      	blx	r4
	pio_pull_up(BUT1_PIO, BUT1_PIO_IDX_MASK, 1);
  401070:	2201      	movs	r2, #1
  401072:	2104      	movs	r1, #4
  401074:	4628      	mov	r0, r5
  401076:	47a0      	blx	r4
	
	pio_handler_set(BUT_PIO, BUT_PIO_ID, BUT_PIO_IDX_MASK, PIO_IT_FALL_EDGE, but_callback);
  401078:	4b13      	ldr	r3, [pc, #76]	; (4010c8 <init+0x138>)
  40107a:	9300      	str	r3, [sp, #0]
  40107c:	2350      	movs	r3, #80	; 0x50
  40107e:	f44f 6200 	mov.w	r2, #2048	; 0x800
  401082:	210a      	movs	r1, #10
  401084:	4628      	mov	r0, r5
  401086:	4c11      	ldr	r4, [pc, #68]	; (4010cc <init+0x13c>)
  401088:	47a0      	blx	r4
	pio_enable_interrupt(BUT_PIO, BUT_PIO_IDX_MASK);
  40108a:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40108e:	4628      	mov	r0, r5
  401090:	4b0f      	ldr	r3, [pc, #60]	; (4010d0 <init+0x140>)
  401092:	4798      	blx	r3
    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
/*  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F));  enable interrupt */
  NVIC->ISER[(uint32_t)((int32_t)IRQn) >> 5] = (uint32_t)(1 << ((uint32_t)((int32_t)IRQn) & (uint32_t)0x1F)); /* enable interrupt */
  401094:	4b0f      	ldr	r3, [pc, #60]	; (4010d4 <init+0x144>)
  401096:	f44f 6280 	mov.w	r2, #1024	; 0x400
  40109a:	601a      	str	r2, [r3, #0]
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
    SCB->SHPR[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
  else {
    NVIC->IP[(uint32_t)(IRQn)]            = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for device specific Interrupts  */
  40109c:	2280      	movs	r2, #128	; 0x80
  40109e:	f883 230a 	strb.w	r2, [r3, #778]	; 0x30a
	
	NVIC_EnableIRQ(BUT_PIO_ID);
	NVIC_SetPriority(BUT_PIO_ID, 4);
}
  4010a2:	b002      	add	sp, #8
  4010a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  4010a8:	004001ad 	.word	0x004001ad
  4010ac:	400e1850 	.word	0x400e1850
  4010b0:	00400529 	.word	0x00400529
  4010b4:	0040027f 	.word	0x0040027f
  4010b8:	400e1400 	.word	0x400e1400
  4010bc:	400e0e00 	.word	0x400e0e00
  4010c0:	00400249 	.word	0x00400249
  4010c4:	0040021d 	.word	0x0040021d
  4010c8:	00400a89 	.word	0x00400a89
  4010cc:	00400335 	.word	0x00400335
  4010d0:	004002d9 	.word	0x004002d9
  4010d4:	e000e100 	.word	0xe000e100
  4010d8:	400e1200 	.word	0x400e1200

004010dc <main>:

/************************************************************************/
/* Main                                                                 */
/************************************************************************/

int main(void){
  4010dc:	b580      	push	{r7, lr}
  4010de:	b082      	sub	sp, #8
	init();
  4010e0:	4b29      	ldr	r3, [pc, #164]	; (401188 <main+0xac>)
  4010e2:	4798      	blx	r3
	
	but_flag = false;
  4010e4:	2200      	movs	r2, #0
  4010e6:	4b29      	ldr	r3, [pc, #164]	; (40118c <main+0xb0>)
  4010e8:	701a      	strb	r2, [r3, #0]
	
	Musica musica;
	
	while(1){		
		pio_set(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK);
  4010ea:	4d29      	ldr	r5, [pc, #164]	; (401190 <main+0xb4>)
		pio_set(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
		pio_set(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK);
  4010ec:	4e29      	ldr	r6, [pc, #164]	; (401194 <main+0xb8>)
		pio_set(LED_PIO, LED_PIO_IDX_MASK);
		
		if(pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK)==0){
  4010ee:	4f2a      	ldr	r7, [pc, #168]	; (401198 <main+0xbc>)
  4010f0:	e012      	b.n	401118 <main+0x3c>
			musica.musica = "Mario Main";
			
			sing(musica);
		}
		
		else if(pio_get(BUT2_PIO, PIO_INPUT, BUT2_PIO_IDX_MASK)==0){
  4010f2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
  4010f6:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  4010fa:	4628      	mov	r0, r5
  4010fc:	4b27      	ldr	r3, [pc, #156]	; (40119c <main+0xc0>)
  4010fe:	4798      	blx	r3
  401100:	2800      	cmp	r0, #0
  401102:	d12d      	bne.n	401160 <main+0x84>
			musica.num_mus = 2;
  401104:	2302      	movs	r3, #2
  401106:	9300      	str	r3, [sp, #0]
			musica.musica = "Underworld Mario";
  401108:	4b25      	ldr	r3, [pc, #148]	; (4011a0 <main+0xc4>)
  40110a:	f88d 3004 	strb.w	r3, [sp, #4]
			
			sing(musica);
  40110e:	ab02      	add	r3, sp, #8
  401110:	e913 0003 	ldmdb	r3, {r0, r1}
  401114:	4b23      	ldr	r3, [pc, #140]	; (4011a4 <main+0xc8>)
  401116:	4798      	blx	r3
		pio_set(LED3_PLACA_PIO, LED3_PLACA_IDX_MASK);
  401118:	f44f 6100 	mov.w	r1, #2048	; 0x800
  40111c:	4628      	mov	r0, r5
  40111e:	4c22      	ldr	r4, [pc, #136]	; (4011a8 <main+0xcc>)
  401120:	47a0      	blx	r4
		pio_set(LED2_PLACA_PIO, LED2_PLACA_IDX_MASK);
  401122:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
  401126:	4628      	mov	r0, r5
  401128:	47a0      	blx	r4
		pio_set(LED1_PLACA_PIO, LED1_PLACA_IDX_MASK);
  40112a:	f44f 2100 	mov.w	r1, #524288	; 0x80000
  40112e:	4630      	mov	r0, r6
  401130:	47a0      	blx	r4
		pio_set(LED_PIO, LED_PIO_IDX_MASK);
  401132:	f44f 7180 	mov.w	r1, #256	; 0x100
  401136:	4630      	mov	r0, r6
  401138:	47a0      	blx	r4
		if(pio_get(BUT1_PIO, PIO_INPUT, BUT1_PIO_IDX_MASK)==0){
  40113a:	2204      	movs	r2, #4
  40113c:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401140:	4638      	mov	r0, r7
  401142:	4b16      	ldr	r3, [pc, #88]	; (40119c <main+0xc0>)
  401144:	4798      	blx	r3
  401146:	2800      	cmp	r0, #0
  401148:	d1d3      	bne.n	4010f2 <main+0x16>
			musica.num_mus = 1;
  40114a:	2301      	movs	r3, #1
  40114c:	9300      	str	r3, [sp, #0]
			musica.musica = "Mario Main";
  40114e:	4b17      	ldr	r3, [pc, #92]	; (4011ac <main+0xd0>)
  401150:	f88d 3004 	strb.w	r3, [sp, #4]
			sing(musica);
  401154:	ab02      	add	r3, sp, #8
  401156:	e913 0003 	ldmdb	r3, {r0, r1}
  40115a:	4b12      	ldr	r3, [pc, #72]	; (4011a4 <main+0xc8>)
  40115c:	4798      	blx	r3
  40115e:	e7db      	b.n	401118 <main+0x3c>
		}
		
		else if(pio_get(BUT3_PIO, PIO_INPUT, BUT3_PIO_IDX_MASK)==0){
  401160:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  401164:	f04f 5120 	mov.w	r1, #671088640	; 0x28000000
  401168:	4630      	mov	r0, r6
  40116a:	4b0c      	ldr	r3, [pc, #48]	; (40119c <main+0xc0>)
  40116c:	4798      	blx	r3
  40116e:	2800      	cmp	r0, #0
  401170:	d1d2      	bne.n	401118 <main+0x3c>
			musica.num_mus = 3;
  401172:	2303      	movs	r3, #3
  401174:	9300      	str	r3, [sp, #0]
			musica.musica = "Pirates";
  401176:	4b0e      	ldr	r3, [pc, #56]	; (4011b0 <main+0xd4>)
  401178:	f88d 3004 	strb.w	r3, [sp, #4]
			
			sing(musica);
  40117c:	ab02      	add	r3, sp, #8
  40117e:	e913 0003 	ldmdb	r3, {r0, r1}
  401182:	4b08      	ldr	r3, [pc, #32]	; (4011a4 <main+0xc8>)
  401184:	4798      	blx	r3
  401186:	e7c7      	b.n	401118 <main+0x3c>
  401188:	00400f91 	.word	0x00400f91
  40118c:	20400f5c 	.word	0x20400f5c
  401190:	400e1400 	.word	0x400e1400
  401194:	400e1200 	.word	0x400e1200
  401198:	400e0e00 	.word	0x400e0e00
  40119c:	0040022f 	.word	0x0040022f
  4011a0:	00401e24 	.word	0x00401e24
  4011a4:	00400d59 	.word	0x00400d59
  4011a8:	00400227 	.word	0x00400227
  4011ac:	00401e18 	.word	0x00401e18
  4011b0:	00401e38 	.word	0x00401e38

004011b4 <__aeabi_drsub>:
  4011b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
  4011b8:	e002      	b.n	4011c0 <__adddf3>
  4011ba:	bf00      	nop

004011bc <__aeabi_dsub>:
  4011bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

004011c0 <__adddf3>:
  4011c0:	b530      	push	{r4, r5, lr}
  4011c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
  4011c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
  4011ca:	ea94 0f05 	teq	r4, r5
  4011ce:	bf08      	it	eq
  4011d0:	ea90 0f02 	teqeq	r0, r2
  4011d4:	bf1f      	itttt	ne
  4011d6:	ea54 0c00 	orrsne.w	ip, r4, r0
  4011da:	ea55 0c02 	orrsne.w	ip, r5, r2
  4011de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
  4011e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4011e6:	f000 80e2 	beq.w	4013ae <__adddf3+0x1ee>
  4011ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
  4011ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
  4011f2:	bfb8      	it	lt
  4011f4:	426d      	neglt	r5, r5
  4011f6:	dd0c      	ble.n	401212 <__adddf3+0x52>
  4011f8:	442c      	add	r4, r5
  4011fa:	ea80 0202 	eor.w	r2, r0, r2
  4011fe:	ea81 0303 	eor.w	r3, r1, r3
  401202:	ea82 0000 	eor.w	r0, r2, r0
  401206:	ea83 0101 	eor.w	r1, r3, r1
  40120a:	ea80 0202 	eor.w	r2, r0, r2
  40120e:	ea81 0303 	eor.w	r3, r1, r3
  401212:	2d36      	cmp	r5, #54	; 0x36
  401214:	bf88      	it	hi
  401216:	bd30      	pophi	{r4, r5, pc}
  401218:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40121c:	ea4f 3101 	mov.w	r1, r1, lsl #12
  401220:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
  401224:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
  401228:	d002      	beq.n	401230 <__adddf3+0x70>
  40122a:	4240      	negs	r0, r0
  40122c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  401230:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
  401234:	ea4f 3303 	mov.w	r3, r3, lsl #12
  401238:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
  40123c:	d002      	beq.n	401244 <__adddf3+0x84>
  40123e:	4252      	negs	r2, r2
  401240:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
  401244:	ea94 0f05 	teq	r4, r5
  401248:	f000 80a7 	beq.w	40139a <__adddf3+0x1da>
  40124c:	f1a4 0401 	sub.w	r4, r4, #1
  401250:	f1d5 0e20 	rsbs	lr, r5, #32
  401254:	db0d      	blt.n	401272 <__adddf3+0xb2>
  401256:	fa02 fc0e 	lsl.w	ip, r2, lr
  40125a:	fa22 f205 	lsr.w	r2, r2, r5
  40125e:	1880      	adds	r0, r0, r2
  401260:	f141 0100 	adc.w	r1, r1, #0
  401264:	fa03 f20e 	lsl.w	r2, r3, lr
  401268:	1880      	adds	r0, r0, r2
  40126a:	fa43 f305 	asr.w	r3, r3, r5
  40126e:	4159      	adcs	r1, r3
  401270:	e00e      	b.n	401290 <__adddf3+0xd0>
  401272:	f1a5 0520 	sub.w	r5, r5, #32
  401276:	f10e 0e20 	add.w	lr, lr, #32
  40127a:	2a01      	cmp	r2, #1
  40127c:	fa03 fc0e 	lsl.w	ip, r3, lr
  401280:	bf28      	it	cs
  401282:	f04c 0c02 	orrcs.w	ip, ip, #2
  401286:	fa43 f305 	asr.w	r3, r3, r5
  40128a:	18c0      	adds	r0, r0, r3
  40128c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
  401290:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401294:	d507      	bpl.n	4012a6 <__adddf3+0xe6>
  401296:	f04f 0e00 	mov.w	lr, #0
  40129a:	f1dc 0c00 	rsbs	ip, ip, #0
  40129e:	eb7e 0000 	sbcs.w	r0, lr, r0
  4012a2:	eb6e 0101 	sbc.w	r1, lr, r1
  4012a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
  4012aa:	d31b      	bcc.n	4012e4 <__adddf3+0x124>
  4012ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
  4012b0:	d30c      	bcc.n	4012cc <__adddf3+0x10c>
  4012b2:	0849      	lsrs	r1, r1, #1
  4012b4:	ea5f 0030 	movs.w	r0, r0, rrx
  4012b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
  4012bc:	f104 0401 	add.w	r4, r4, #1
  4012c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
  4012c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
  4012c8:	f080 809a 	bcs.w	401400 <__adddf3+0x240>
  4012cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
  4012d0:	bf08      	it	eq
  4012d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4012d6:	f150 0000 	adcs.w	r0, r0, #0
  4012da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4012de:	ea41 0105 	orr.w	r1, r1, r5
  4012e2:	bd30      	pop	{r4, r5, pc}
  4012e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
  4012e8:	4140      	adcs	r0, r0
  4012ea:	eb41 0101 	adc.w	r1, r1, r1
  4012ee:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4012f2:	f1a4 0401 	sub.w	r4, r4, #1
  4012f6:	d1e9      	bne.n	4012cc <__adddf3+0x10c>
  4012f8:	f091 0f00 	teq	r1, #0
  4012fc:	bf04      	itt	eq
  4012fe:	4601      	moveq	r1, r0
  401300:	2000      	moveq	r0, #0
  401302:	fab1 f381 	clz	r3, r1
  401306:	bf08      	it	eq
  401308:	3320      	addeq	r3, #32
  40130a:	f1a3 030b 	sub.w	r3, r3, #11
  40130e:	f1b3 0220 	subs.w	r2, r3, #32
  401312:	da0c      	bge.n	40132e <__adddf3+0x16e>
  401314:	320c      	adds	r2, #12
  401316:	dd08      	ble.n	40132a <__adddf3+0x16a>
  401318:	f102 0c14 	add.w	ip, r2, #20
  40131c:	f1c2 020c 	rsb	r2, r2, #12
  401320:	fa01 f00c 	lsl.w	r0, r1, ip
  401324:	fa21 f102 	lsr.w	r1, r1, r2
  401328:	e00c      	b.n	401344 <__adddf3+0x184>
  40132a:	f102 0214 	add.w	r2, r2, #20
  40132e:	bfd8      	it	le
  401330:	f1c2 0c20 	rsble	ip, r2, #32
  401334:	fa01 f102 	lsl.w	r1, r1, r2
  401338:	fa20 fc0c 	lsr.w	ip, r0, ip
  40133c:	bfdc      	itt	le
  40133e:	ea41 010c 	orrle.w	r1, r1, ip
  401342:	4090      	lslle	r0, r2
  401344:	1ae4      	subs	r4, r4, r3
  401346:	bfa2      	ittt	ge
  401348:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
  40134c:	4329      	orrge	r1, r5
  40134e:	bd30      	popge	{r4, r5, pc}
  401350:	ea6f 0404 	mvn.w	r4, r4
  401354:	3c1f      	subs	r4, #31
  401356:	da1c      	bge.n	401392 <__adddf3+0x1d2>
  401358:	340c      	adds	r4, #12
  40135a:	dc0e      	bgt.n	40137a <__adddf3+0x1ba>
  40135c:	f104 0414 	add.w	r4, r4, #20
  401360:	f1c4 0220 	rsb	r2, r4, #32
  401364:	fa20 f004 	lsr.w	r0, r0, r4
  401368:	fa01 f302 	lsl.w	r3, r1, r2
  40136c:	ea40 0003 	orr.w	r0, r0, r3
  401370:	fa21 f304 	lsr.w	r3, r1, r4
  401374:	ea45 0103 	orr.w	r1, r5, r3
  401378:	bd30      	pop	{r4, r5, pc}
  40137a:	f1c4 040c 	rsb	r4, r4, #12
  40137e:	f1c4 0220 	rsb	r2, r4, #32
  401382:	fa20 f002 	lsr.w	r0, r0, r2
  401386:	fa01 f304 	lsl.w	r3, r1, r4
  40138a:	ea40 0003 	orr.w	r0, r0, r3
  40138e:	4629      	mov	r1, r5
  401390:	bd30      	pop	{r4, r5, pc}
  401392:	fa21 f004 	lsr.w	r0, r1, r4
  401396:	4629      	mov	r1, r5
  401398:	bd30      	pop	{r4, r5, pc}
  40139a:	f094 0f00 	teq	r4, #0
  40139e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
  4013a2:	bf06      	itte	eq
  4013a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
  4013a8:	3401      	addeq	r4, #1
  4013aa:	3d01      	subne	r5, #1
  4013ac:	e74e      	b.n	40124c <__adddf3+0x8c>
  4013ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  4013b2:	bf18      	it	ne
  4013b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
  4013b8:	d029      	beq.n	40140e <__adddf3+0x24e>
  4013ba:	ea94 0f05 	teq	r4, r5
  4013be:	bf08      	it	eq
  4013c0:	ea90 0f02 	teqeq	r0, r2
  4013c4:	d005      	beq.n	4013d2 <__adddf3+0x212>
  4013c6:	ea54 0c00 	orrs.w	ip, r4, r0
  4013ca:	bf04      	itt	eq
  4013cc:	4619      	moveq	r1, r3
  4013ce:	4610      	moveq	r0, r2
  4013d0:	bd30      	pop	{r4, r5, pc}
  4013d2:	ea91 0f03 	teq	r1, r3
  4013d6:	bf1e      	ittt	ne
  4013d8:	2100      	movne	r1, #0
  4013da:	2000      	movne	r0, #0
  4013dc:	bd30      	popne	{r4, r5, pc}
  4013de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
  4013e2:	d105      	bne.n	4013f0 <__adddf3+0x230>
  4013e4:	0040      	lsls	r0, r0, #1
  4013e6:	4149      	adcs	r1, r1
  4013e8:	bf28      	it	cs
  4013ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
  4013ee:	bd30      	pop	{r4, r5, pc}
  4013f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
  4013f4:	bf3c      	itt	cc
  4013f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
  4013fa:	bd30      	popcc	{r4, r5, pc}
  4013fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  401400:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
  401404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401408:	f04f 0000 	mov.w	r0, #0
  40140c:	bd30      	pop	{r4, r5, pc}
  40140e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
  401412:	bf1a      	itte	ne
  401414:	4619      	movne	r1, r3
  401416:	4610      	movne	r0, r2
  401418:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
  40141c:	bf1c      	itt	ne
  40141e:	460b      	movne	r3, r1
  401420:	4602      	movne	r2, r0
  401422:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401426:	bf06      	itte	eq
  401428:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
  40142c:	ea91 0f03 	teqeq	r1, r3
  401430:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
  401434:	bd30      	pop	{r4, r5, pc}
  401436:	bf00      	nop

00401438 <__aeabi_ui2d>:
  401438:	f090 0f00 	teq	r0, #0
  40143c:	bf04      	itt	eq
  40143e:	2100      	moveq	r1, #0
  401440:	4770      	bxeq	lr
  401442:	b530      	push	{r4, r5, lr}
  401444:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401448:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40144c:	f04f 0500 	mov.w	r5, #0
  401450:	f04f 0100 	mov.w	r1, #0
  401454:	e750      	b.n	4012f8 <__adddf3+0x138>
  401456:	bf00      	nop

00401458 <__aeabi_i2d>:
  401458:	f090 0f00 	teq	r0, #0
  40145c:	bf04      	itt	eq
  40145e:	2100      	moveq	r1, #0
  401460:	4770      	bxeq	lr
  401462:	b530      	push	{r4, r5, lr}
  401464:	f44f 6480 	mov.w	r4, #1024	; 0x400
  401468:	f104 0432 	add.w	r4, r4, #50	; 0x32
  40146c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
  401470:	bf48      	it	mi
  401472:	4240      	negmi	r0, r0
  401474:	f04f 0100 	mov.w	r1, #0
  401478:	e73e      	b.n	4012f8 <__adddf3+0x138>
  40147a:	bf00      	nop

0040147c <__aeabi_f2d>:
  40147c:	0042      	lsls	r2, r0, #1
  40147e:	ea4f 01e2 	mov.w	r1, r2, asr #3
  401482:	ea4f 0131 	mov.w	r1, r1, rrx
  401486:	ea4f 7002 	mov.w	r0, r2, lsl #28
  40148a:	bf1f      	itttt	ne
  40148c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
  401490:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  401494:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
  401498:	4770      	bxne	lr
  40149a:	f092 0f00 	teq	r2, #0
  40149e:	bf14      	ite	ne
  4014a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
  4014a4:	4770      	bxeq	lr
  4014a6:	b530      	push	{r4, r5, lr}
  4014a8:	f44f 7460 	mov.w	r4, #896	; 0x380
  4014ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
  4014b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  4014b4:	e720      	b.n	4012f8 <__adddf3+0x138>
  4014b6:	bf00      	nop

004014b8 <__aeabi_ul2d>:
  4014b8:	ea50 0201 	orrs.w	r2, r0, r1
  4014bc:	bf08      	it	eq
  4014be:	4770      	bxeq	lr
  4014c0:	b530      	push	{r4, r5, lr}
  4014c2:	f04f 0500 	mov.w	r5, #0
  4014c6:	e00a      	b.n	4014de <__aeabi_l2d+0x16>

004014c8 <__aeabi_l2d>:
  4014c8:	ea50 0201 	orrs.w	r2, r0, r1
  4014cc:	bf08      	it	eq
  4014ce:	4770      	bxeq	lr
  4014d0:	b530      	push	{r4, r5, lr}
  4014d2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
  4014d6:	d502      	bpl.n	4014de <__aeabi_l2d+0x16>
  4014d8:	4240      	negs	r0, r0
  4014da:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
  4014de:	f44f 6480 	mov.w	r4, #1024	; 0x400
  4014e2:	f104 0432 	add.w	r4, r4, #50	; 0x32
  4014e6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
  4014ea:	f43f aedc 	beq.w	4012a6 <__adddf3+0xe6>
  4014ee:	f04f 0203 	mov.w	r2, #3
  4014f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4014f6:	bf18      	it	ne
  4014f8:	3203      	addne	r2, #3
  4014fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
  4014fe:	bf18      	it	ne
  401500:	3203      	addne	r2, #3
  401502:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
  401506:	f1c2 0320 	rsb	r3, r2, #32
  40150a:	fa00 fc03 	lsl.w	ip, r0, r3
  40150e:	fa20 f002 	lsr.w	r0, r0, r2
  401512:	fa01 fe03 	lsl.w	lr, r1, r3
  401516:	ea40 000e 	orr.w	r0, r0, lr
  40151a:	fa21 f102 	lsr.w	r1, r1, r2
  40151e:	4414      	add	r4, r2
  401520:	e6c1      	b.n	4012a6 <__adddf3+0xe6>
  401522:	bf00      	nop

00401524 <__aeabi_dmul>:
  401524:	b570      	push	{r4, r5, r6, lr}
  401526:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40152a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  40152e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401532:	bf1d      	ittte	ne
  401534:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  401538:	ea94 0f0c 	teqne	r4, ip
  40153c:	ea95 0f0c 	teqne	r5, ip
  401540:	f000 f8de 	bleq	401700 <__aeabi_dmul+0x1dc>
  401544:	442c      	add	r4, r5
  401546:	ea81 0603 	eor.w	r6, r1, r3
  40154a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
  40154e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
  401552:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
  401556:	bf18      	it	ne
  401558:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
  40155c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  401560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
  401564:	d038      	beq.n	4015d8 <__aeabi_dmul+0xb4>
  401566:	fba0 ce02 	umull	ip, lr, r0, r2
  40156a:	f04f 0500 	mov.w	r5, #0
  40156e:	fbe1 e502 	umlal	lr, r5, r1, r2
  401572:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
  401576:	fbe0 e503 	umlal	lr, r5, r0, r3
  40157a:	f04f 0600 	mov.w	r6, #0
  40157e:	fbe1 5603 	umlal	r5, r6, r1, r3
  401582:	f09c 0f00 	teq	ip, #0
  401586:	bf18      	it	ne
  401588:	f04e 0e01 	orrne.w	lr, lr, #1
  40158c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
  401590:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
  401594:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
  401598:	d204      	bcs.n	4015a4 <__aeabi_dmul+0x80>
  40159a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
  40159e:	416d      	adcs	r5, r5
  4015a0:	eb46 0606 	adc.w	r6, r6, r6
  4015a4:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
  4015a8:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
  4015ac:	ea4f 20c5 	mov.w	r0, r5, lsl #11
  4015b0:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
  4015b4:	ea4f 2ece 	mov.w	lr, lr, lsl #11
  4015b8:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  4015bc:	bf88      	it	hi
  4015be:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4015c2:	d81e      	bhi.n	401602 <__aeabi_dmul+0xde>
  4015c4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
  4015c8:	bf08      	it	eq
  4015ca:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
  4015ce:	f150 0000 	adcs.w	r0, r0, #0
  4015d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4015d6:	bd70      	pop	{r4, r5, r6, pc}
  4015d8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
  4015dc:	ea46 0101 	orr.w	r1, r6, r1
  4015e0:	ea40 0002 	orr.w	r0, r0, r2
  4015e4:	ea81 0103 	eor.w	r1, r1, r3
  4015e8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
  4015ec:	bfc2      	ittt	gt
  4015ee:	ebd4 050c 	rsbsgt	r5, r4, ip
  4015f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4015f6:	bd70      	popgt	{r4, r5, r6, pc}
  4015f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4015fc:	f04f 0e00 	mov.w	lr, #0
  401600:	3c01      	subs	r4, #1
  401602:	f300 80ab 	bgt.w	40175c <__aeabi_dmul+0x238>
  401606:	f114 0f36 	cmn.w	r4, #54	; 0x36
  40160a:	bfde      	ittt	le
  40160c:	2000      	movle	r0, #0
  40160e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
  401612:	bd70      	pople	{r4, r5, r6, pc}
  401614:	f1c4 0400 	rsb	r4, r4, #0
  401618:	3c20      	subs	r4, #32
  40161a:	da35      	bge.n	401688 <__aeabi_dmul+0x164>
  40161c:	340c      	adds	r4, #12
  40161e:	dc1b      	bgt.n	401658 <__aeabi_dmul+0x134>
  401620:	f104 0414 	add.w	r4, r4, #20
  401624:	f1c4 0520 	rsb	r5, r4, #32
  401628:	fa00 f305 	lsl.w	r3, r0, r5
  40162c:	fa20 f004 	lsr.w	r0, r0, r4
  401630:	fa01 f205 	lsl.w	r2, r1, r5
  401634:	ea40 0002 	orr.w	r0, r0, r2
  401638:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
  40163c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
  401640:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401644:	fa21 f604 	lsr.w	r6, r1, r4
  401648:	eb42 0106 	adc.w	r1, r2, r6
  40164c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401650:	bf08      	it	eq
  401652:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401656:	bd70      	pop	{r4, r5, r6, pc}
  401658:	f1c4 040c 	rsb	r4, r4, #12
  40165c:	f1c4 0520 	rsb	r5, r4, #32
  401660:	fa00 f304 	lsl.w	r3, r0, r4
  401664:	fa20 f005 	lsr.w	r0, r0, r5
  401668:	fa01 f204 	lsl.w	r2, r1, r4
  40166c:	ea40 0002 	orr.w	r0, r0, r2
  401670:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
  401678:	f141 0100 	adc.w	r1, r1, #0
  40167c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  401680:	bf08      	it	eq
  401682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  401686:	bd70      	pop	{r4, r5, r6, pc}
  401688:	f1c4 0520 	rsb	r5, r4, #32
  40168c:	fa00 f205 	lsl.w	r2, r0, r5
  401690:	ea4e 0e02 	orr.w	lr, lr, r2
  401694:	fa20 f304 	lsr.w	r3, r0, r4
  401698:	fa01 f205 	lsl.w	r2, r1, r5
  40169c:	ea43 0302 	orr.w	r3, r3, r2
  4016a0:	fa21 f004 	lsr.w	r0, r1, r4
  4016a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  4016a8:	fa21 f204 	lsr.w	r2, r1, r4
  4016ac:	ea20 0002 	bic.w	r0, r0, r2
  4016b0:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
  4016b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
  4016b8:	bf08      	it	eq
  4016ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
  4016be:	bd70      	pop	{r4, r5, r6, pc}
  4016c0:	f094 0f00 	teq	r4, #0
  4016c4:	d10f      	bne.n	4016e6 <__aeabi_dmul+0x1c2>
  4016c6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
  4016ca:	0040      	lsls	r0, r0, #1
  4016cc:	eb41 0101 	adc.w	r1, r1, r1
  4016d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  4016d4:	bf08      	it	eq
  4016d6:	3c01      	subeq	r4, #1
  4016d8:	d0f7      	beq.n	4016ca <__aeabi_dmul+0x1a6>
  4016da:	ea41 0106 	orr.w	r1, r1, r6
  4016de:	f095 0f00 	teq	r5, #0
  4016e2:	bf18      	it	ne
  4016e4:	4770      	bxne	lr
  4016e6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
  4016ea:	0052      	lsls	r2, r2, #1
  4016ec:	eb43 0303 	adc.w	r3, r3, r3
  4016f0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
  4016f4:	bf08      	it	eq
  4016f6:	3d01      	subeq	r5, #1
  4016f8:	d0f7      	beq.n	4016ea <__aeabi_dmul+0x1c6>
  4016fa:	ea43 0306 	orr.w	r3, r3, r6
  4016fe:	4770      	bx	lr
  401700:	ea94 0f0c 	teq	r4, ip
  401704:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  401708:	bf18      	it	ne
  40170a:	ea95 0f0c 	teqne	r5, ip
  40170e:	d00c      	beq.n	40172a <__aeabi_dmul+0x206>
  401710:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  401714:	bf18      	it	ne
  401716:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  40171a:	d1d1      	bne.n	4016c0 <__aeabi_dmul+0x19c>
  40171c:	ea81 0103 	eor.w	r1, r1, r3
  401720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401724:	f04f 0000 	mov.w	r0, #0
  401728:	bd70      	pop	{r4, r5, r6, pc}
  40172a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40172e:	bf06      	itte	eq
  401730:	4610      	moveq	r0, r2
  401732:	4619      	moveq	r1, r3
  401734:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401738:	d019      	beq.n	40176e <__aeabi_dmul+0x24a>
  40173a:	ea94 0f0c 	teq	r4, ip
  40173e:	d102      	bne.n	401746 <__aeabi_dmul+0x222>
  401740:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
  401744:	d113      	bne.n	40176e <__aeabi_dmul+0x24a>
  401746:	ea95 0f0c 	teq	r5, ip
  40174a:	d105      	bne.n	401758 <__aeabi_dmul+0x234>
  40174c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
  401750:	bf1c      	itt	ne
  401752:	4610      	movne	r0, r2
  401754:	4619      	movne	r1, r3
  401756:	d10a      	bne.n	40176e <__aeabi_dmul+0x24a>
  401758:	ea81 0103 	eor.w	r1, r1, r3
  40175c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
  401760:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
  401768:	f04f 0000 	mov.w	r0, #0
  40176c:	bd70      	pop	{r4, r5, r6, pc}
  40176e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
  401772:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
  401776:	bd70      	pop	{r4, r5, r6, pc}

00401778 <__aeabi_ddiv>:
  401778:	b570      	push	{r4, r5, r6, lr}
  40177a:	f04f 0cff 	mov.w	ip, #255	; 0xff
  40177e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
  401782:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
  401786:	bf1d      	ittte	ne
  401788:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
  40178c:	ea94 0f0c 	teqne	r4, ip
  401790:	ea95 0f0c 	teqne	r5, ip
  401794:	f000 f8a7 	bleq	4018e6 <__aeabi_ddiv+0x16e>
  401798:	eba4 0405 	sub.w	r4, r4, r5
  40179c:	ea81 0e03 	eor.w	lr, r1, r3
  4017a0:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  4017a4:	ea4f 3101 	mov.w	r1, r1, lsl #12
  4017a8:	f000 8088 	beq.w	4018bc <__aeabi_ddiv+0x144>
  4017ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
  4017b0:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
  4017b4:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
  4017b8:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
  4017bc:	ea4f 2202 	mov.w	r2, r2, lsl #8
  4017c0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
  4017c4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
  4017c8:	ea4f 2600 	mov.w	r6, r0, lsl #8
  4017cc:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
  4017d0:	429d      	cmp	r5, r3
  4017d2:	bf08      	it	eq
  4017d4:	4296      	cmpeq	r6, r2
  4017d6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
  4017da:	f504 7440 	add.w	r4, r4, #768	; 0x300
  4017de:	d202      	bcs.n	4017e6 <__aeabi_ddiv+0x6e>
  4017e0:	085b      	lsrs	r3, r3, #1
  4017e2:	ea4f 0232 	mov.w	r2, r2, rrx
  4017e6:	1ab6      	subs	r6, r6, r2
  4017e8:	eb65 0503 	sbc.w	r5, r5, r3
  4017ec:	085b      	lsrs	r3, r3, #1
  4017ee:	ea4f 0232 	mov.w	r2, r2, rrx
  4017f2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
  4017f6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
  4017fa:	ebb6 0e02 	subs.w	lr, r6, r2
  4017fe:	eb75 0e03 	sbcs.w	lr, r5, r3
  401802:	bf22      	ittt	cs
  401804:	1ab6      	subcs	r6, r6, r2
  401806:	4675      	movcs	r5, lr
  401808:	ea40 000c 	orrcs.w	r0, r0, ip
  40180c:	085b      	lsrs	r3, r3, #1
  40180e:	ea4f 0232 	mov.w	r2, r2, rrx
  401812:	ebb6 0e02 	subs.w	lr, r6, r2
  401816:	eb75 0e03 	sbcs.w	lr, r5, r3
  40181a:	bf22      	ittt	cs
  40181c:	1ab6      	subcs	r6, r6, r2
  40181e:	4675      	movcs	r5, lr
  401820:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
  401824:	085b      	lsrs	r3, r3, #1
  401826:	ea4f 0232 	mov.w	r2, r2, rrx
  40182a:	ebb6 0e02 	subs.w	lr, r6, r2
  40182e:	eb75 0e03 	sbcs.w	lr, r5, r3
  401832:	bf22      	ittt	cs
  401834:	1ab6      	subcs	r6, r6, r2
  401836:	4675      	movcs	r5, lr
  401838:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
  40183c:	085b      	lsrs	r3, r3, #1
  40183e:	ea4f 0232 	mov.w	r2, r2, rrx
  401842:	ebb6 0e02 	subs.w	lr, r6, r2
  401846:	eb75 0e03 	sbcs.w	lr, r5, r3
  40184a:	bf22      	ittt	cs
  40184c:	1ab6      	subcs	r6, r6, r2
  40184e:	4675      	movcs	r5, lr
  401850:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
  401854:	ea55 0e06 	orrs.w	lr, r5, r6
  401858:	d018      	beq.n	40188c <__aeabi_ddiv+0x114>
  40185a:	ea4f 1505 	mov.w	r5, r5, lsl #4
  40185e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
  401862:	ea4f 1606 	mov.w	r6, r6, lsl #4
  401866:	ea4f 03c3 	mov.w	r3, r3, lsl #3
  40186a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
  40186e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
  401872:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
  401876:	d1c0      	bne.n	4017fa <__aeabi_ddiv+0x82>
  401878:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  40187c:	d10b      	bne.n	401896 <__aeabi_ddiv+0x11e>
  40187e:	ea41 0100 	orr.w	r1, r1, r0
  401882:	f04f 0000 	mov.w	r0, #0
  401886:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
  40188a:	e7b6      	b.n	4017fa <__aeabi_ddiv+0x82>
  40188c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
  401890:	bf04      	itt	eq
  401892:	4301      	orreq	r1, r0
  401894:	2000      	moveq	r0, #0
  401896:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
  40189a:	bf88      	it	hi
  40189c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
  4018a0:	f63f aeaf 	bhi.w	401602 <__aeabi_dmul+0xde>
  4018a4:	ebb5 0c03 	subs.w	ip, r5, r3
  4018a8:	bf04      	itt	eq
  4018aa:	ebb6 0c02 	subseq.w	ip, r6, r2
  4018ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
  4018b2:	f150 0000 	adcs.w	r0, r0, #0
  4018b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
  4018ba:	bd70      	pop	{r4, r5, r6, pc}
  4018bc:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
  4018c0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
  4018c4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
  4018c8:	bfc2      	ittt	gt
  4018ca:	ebd4 050c 	rsbsgt	r5, r4, ip
  4018ce:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
  4018d2:	bd70      	popgt	{r4, r5, r6, pc}
  4018d4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
  4018d8:	f04f 0e00 	mov.w	lr, #0
  4018dc:	3c01      	subs	r4, #1
  4018de:	e690      	b.n	401602 <__aeabi_dmul+0xde>
  4018e0:	ea45 0e06 	orr.w	lr, r5, r6
  4018e4:	e68d      	b.n	401602 <__aeabi_dmul+0xde>
  4018e6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
  4018ea:	ea94 0f0c 	teq	r4, ip
  4018ee:	bf08      	it	eq
  4018f0:	ea95 0f0c 	teqeq	r5, ip
  4018f4:	f43f af3b 	beq.w	40176e <__aeabi_dmul+0x24a>
  4018f8:	ea94 0f0c 	teq	r4, ip
  4018fc:	d10a      	bne.n	401914 <__aeabi_ddiv+0x19c>
  4018fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
  401902:	f47f af34 	bne.w	40176e <__aeabi_dmul+0x24a>
  401906:	ea95 0f0c 	teq	r5, ip
  40190a:	f47f af25 	bne.w	401758 <__aeabi_dmul+0x234>
  40190e:	4610      	mov	r0, r2
  401910:	4619      	mov	r1, r3
  401912:	e72c      	b.n	40176e <__aeabi_dmul+0x24a>
  401914:	ea95 0f0c 	teq	r5, ip
  401918:	d106      	bne.n	401928 <__aeabi_ddiv+0x1b0>
  40191a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
  40191e:	f43f aefd 	beq.w	40171c <__aeabi_dmul+0x1f8>
  401922:	4610      	mov	r0, r2
  401924:	4619      	mov	r1, r3
  401926:	e722      	b.n	40176e <__aeabi_dmul+0x24a>
  401928:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
  40192c:	bf18      	it	ne
  40192e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
  401932:	f47f aec5 	bne.w	4016c0 <__aeabi_dmul+0x19c>
  401936:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
  40193a:	f47f af0d 	bne.w	401758 <__aeabi_dmul+0x234>
  40193e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
  401942:	f47f aeeb 	bne.w	40171c <__aeabi_dmul+0x1f8>
  401946:	e712      	b.n	40176e <__aeabi_dmul+0x24a>

00401948 <__aeabi_d2iz>:
  401948:	ea4f 0241 	mov.w	r2, r1, lsl #1
  40194c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
  401950:	d215      	bcs.n	40197e <__aeabi_d2iz+0x36>
  401952:	d511      	bpl.n	401978 <__aeabi_d2iz+0x30>
  401954:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
  401958:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
  40195c:	d912      	bls.n	401984 <__aeabi_d2iz+0x3c>
  40195e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
  401962:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
  401966:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
  40196a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
  40196e:	fa23 f002 	lsr.w	r0, r3, r2
  401972:	bf18      	it	ne
  401974:	4240      	negne	r0, r0
  401976:	4770      	bx	lr
  401978:	f04f 0000 	mov.w	r0, #0
  40197c:	4770      	bx	lr
  40197e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
  401982:	d105      	bne.n	401990 <__aeabi_d2iz+0x48>
  401984:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
  401988:	bf08      	it	eq
  40198a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
  40198e:	4770      	bx	lr
  401990:	f04f 0000 	mov.w	r0, #0
  401994:	4770      	bx	lr
  401996:	bf00      	nop

00401998 <__aeabi_uldivmod>:
  401998:	b953      	cbnz	r3, 4019b0 <__aeabi_uldivmod+0x18>
  40199a:	b94a      	cbnz	r2, 4019b0 <__aeabi_uldivmod+0x18>
  40199c:	2900      	cmp	r1, #0
  40199e:	bf08      	it	eq
  4019a0:	2800      	cmpeq	r0, #0
  4019a2:	bf1c      	itt	ne
  4019a4:	f04f 31ff 	movne.w	r1, #4294967295
  4019a8:	f04f 30ff 	movne.w	r0, #4294967295
  4019ac:	f000 b97a 	b.w	401ca4 <__aeabi_idiv0>
  4019b0:	f1ad 0c08 	sub.w	ip, sp, #8
  4019b4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
  4019b8:	f000 f806 	bl	4019c8 <__udivmoddi4>
  4019bc:	f8dd e004 	ldr.w	lr, [sp, #4]
  4019c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
  4019c4:	b004      	add	sp, #16
  4019c6:	4770      	bx	lr

004019c8 <__udivmoddi4>:
  4019c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  4019cc:	468c      	mov	ip, r1
  4019ce:	460d      	mov	r5, r1
  4019d0:	4604      	mov	r4, r0
  4019d2:	9e08      	ldr	r6, [sp, #32]
  4019d4:	2b00      	cmp	r3, #0
  4019d6:	d151      	bne.n	401a7c <__udivmoddi4+0xb4>
  4019d8:	428a      	cmp	r2, r1
  4019da:	4617      	mov	r7, r2
  4019dc:	d96d      	bls.n	401aba <__udivmoddi4+0xf2>
  4019de:	fab2 fe82 	clz	lr, r2
  4019e2:	f1be 0f00 	cmp.w	lr, #0
  4019e6:	d00b      	beq.n	401a00 <__udivmoddi4+0x38>
  4019e8:	f1ce 0c20 	rsb	ip, lr, #32
  4019ec:	fa01 f50e 	lsl.w	r5, r1, lr
  4019f0:	fa20 fc0c 	lsr.w	ip, r0, ip
  4019f4:	fa02 f70e 	lsl.w	r7, r2, lr
  4019f8:	ea4c 0c05 	orr.w	ip, ip, r5
  4019fc:	fa00 f40e 	lsl.w	r4, r0, lr
  401a00:	ea4f 4a17 	mov.w	sl, r7, lsr #16
  401a04:	0c25      	lsrs	r5, r4, #16
  401a06:	fbbc f8fa 	udiv	r8, ip, sl
  401a0a:	fa1f f987 	uxth.w	r9, r7
  401a0e:	fb0a cc18 	mls	ip, sl, r8, ip
  401a12:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
  401a16:	fb08 f309 	mul.w	r3, r8, r9
  401a1a:	42ab      	cmp	r3, r5
  401a1c:	d90a      	bls.n	401a34 <__udivmoddi4+0x6c>
  401a1e:	19ed      	adds	r5, r5, r7
  401a20:	f108 32ff 	add.w	r2, r8, #4294967295
  401a24:	f080 8123 	bcs.w	401c6e <__udivmoddi4+0x2a6>
  401a28:	42ab      	cmp	r3, r5
  401a2a:	f240 8120 	bls.w	401c6e <__udivmoddi4+0x2a6>
  401a2e:	f1a8 0802 	sub.w	r8, r8, #2
  401a32:	443d      	add	r5, r7
  401a34:	1aed      	subs	r5, r5, r3
  401a36:	b2a4      	uxth	r4, r4
  401a38:	fbb5 f0fa 	udiv	r0, r5, sl
  401a3c:	fb0a 5510 	mls	r5, sl, r0, r5
  401a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
  401a44:	fb00 f909 	mul.w	r9, r0, r9
  401a48:	45a1      	cmp	r9, r4
  401a4a:	d909      	bls.n	401a60 <__udivmoddi4+0x98>
  401a4c:	19e4      	adds	r4, r4, r7
  401a4e:	f100 33ff 	add.w	r3, r0, #4294967295
  401a52:	f080 810a 	bcs.w	401c6a <__udivmoddi4+0x2a2>
  401a56:	45a1      	cmp	r9, r4
  401a58:	f240 8107 	bls.w	401c6a <__udivmoddi4+0x2a2>
  401a5c:	3802      	subs	r0, #2
  401a5e:	443c      	add	r4, r7
  401a60:	eba4 0409 	sub.w	r4, r4, r9
  401a64:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401a68:	2100      	movs	r1, #0
  401a6a:	2e00      	cmp	r6, #0
  401a6c:	d061      	beq.n	401b32 <__udivmoddi4+0x16a>
  401a6e:	fa24 f40e 	lsr.w	r4, r4, lr
  401a72:	2300      	movs	r3, #0
  401a74:	6034      	str	r4, [r6, #0]
  401a76:	6073      	str	r3, [r6, #4]
  401a78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a7c:	428b      	cmp	r3, r1
  401a7e:	d907      	bls.n	401a90 <__udivmoddi4+0xc8>
  401a80:	2e00      	cmp	r6, #0
  401a82:	d054      	beq.n	401b2e <__udivmoddi4+0x166>
  401a84:	2100      	movs	r1, #0
  401a86:	e886 0021 	stmia.w	r6, {r0, r5}
  401a8a:	4608      	mov	r0, r1
  401a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401a90:	fab3 f183 	clz	r1, r3
  401a94:	2900      	cmp	r1, #0
  401a96:	f040 808e 	bne.w	401bb6 <__udivmoddi4+0x1ee>
  401a9a:	42ab      	cmp	r3, r5
  401a9c:	d302      	bcc.n	401aa4 <__udivmoddi4+0xdc>
  401a9e:	4282      	cmp	r2, r0
  401aa0:	f200 80fa 	bhi.w	401c98 <__udivmoddi4+0x2d0>
  401aa4:	1a84      	subs	r4, r0, r2
  401aa6:	eb65 0503 	sbc.w	r5, r5, r3
  401aaa:	2001      	movs	r0, #1
  401aac:	46ac      	mov	ip, r5
  401aae:	2e00      	cmp	r6, #0
  401ab0:	d03f      	beq.n	401b32 <__udivmoddi4+0x16a>
  401ab2:	e886 1010 	stmia.w	r6, {r4, ip}
  401ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401aba:	b912      	cbnz	r2, 401ac2 <__udivmoddi4+0xfa>
  401abc:	2701      	movs	r7, #1
  401abe:	fbb7 f7f2 	udiv	r7, r7, r2
  401ac2:	fab7 fe87 	clz	lr, r7
  401ac6:	f1be 0f00 	cmp.w	lr, #0
  401aca:	d134      	bne.n	401b36 <__udivmoddi4+0x16e>
  401acc:	1beb      	subs	r3, r5, r7
  401ace:	0c3a      	lsrs	r2, r7, #16
  401ad0:	fa1f fc87 	uxth.w	ip, r7
  401ad4:	2101      	movs	r1, #1
  401ad6:	fbb3 f8f2 	udiv	r8, r3, r2
  401ada:	0c25      	lsrs	r5, r4, #16
  401adc:	fb02 3318 	mls	r3, r2, r8, r3
  401ae0:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401ae4:	fb0c f308 	mul.w	r3, ip, r8
  401ae8:	42ab      	cmp	r3, r5
  401aea:	d907      	bls.n	401afc <__udivmoddi4+0x134>
  401aec:	19ed      	adds	r5, r5, r7
  401aee:	f108 30ff 	add.w	r0, r8, #4294967295
  401af2:	d202      	bcs.n	401afa <__udivmoddi4+0x132>
  401af4:	42ab      	cmp	r3, r5
  401af6:	f200 80d1 	bhi.w	401c9c <__udivmoddi4+0x2d4>
  401afa:	4680      	mov	r8, r0
  401afc:	1aed      	subs	r5, r5, r3
  401afe:	b2a3      	uxth	r3, r4
  401b00:	fbb5 f0f2 	udiv	r0, r5, r2
  401b04:	fb02 5510 	mls	r5, r2, r0, r5
  401b08:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
  401b0c:	fb0c fc00 	mul.w	ip, ip, r0
  401b10:	45a4      	cmp	ip, r4
  401b12:	d907      	bls.n	401b24 <__udivmoddi4+0x15c>
  401b14:	19e4      	adds	r4, r4, r7
  401b16:	f100 33ff 	add.w	r3, r0, #4294967295
  401b1a:	d202      	bcs.n	401b22 <__udivmoddi4+0x15a>
  401b1c:	45a4      	cmp	ip, r4
  401b1e:	f200 80b8 	bhi.w	401c92 <__udivmoddi4+0x2ca>
  401b22:	4618      	mov	r0, r3
  401b24:	eba4 040c 	sub.w	r4, r4, ip
  401b28:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
  401b2c:	e79d      	b.n	401a6a <__udivmoddi4+0xa2>
  401b2e:	4631      	mov	r1, r6
  401b30:	4630      	mov	r0, r6
  401b32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401b36:	f1ce 0420 	rsb	r4, lr, #32
  401b3a:	fa05 f30e 	lsl.w	r3, r5, lr
  401b3e:	fa07 f70e 	lsl.w	r7, r7, lr
  401b42:	fa20 f804 	lsr.w	r8, r0, r4
  401b46:	0c3a      	lsrs	r2, r7, #16
  401b48:	fa25 f404 	lsr.w	r4, r5, r4
  401b4c:	ea48 0803 	orr.w	r8, r8, r3
  401b50:	fbb4 f1f2 	udiv	r1, r4, r2
  401b54:	ea4f 4518 	mov.w	r5, r8, lsr #16
  401b58:	fb02 4411 	mls	r4, r2, r1, r4
  401b5c:	fa1f fc87 	uxth.w	ip, r7
  401b60:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
  401b64:	fb01 f30c 	mul.w	r3, r1, ip
  401b68:	42ab      	cmp	r3, r5
  401b6a:	fa00 f40e 	lsl.w	r4, r0, lr
  401b6e:	d909      	bls.n	401b84 <__udivmoddi4+0x1bc>
  401b70:	19ed      	adds	r5, r5, r7
  401b72:	f101 30ff 	add.w	r0, r1, #4294967295
  401b76:	f080 808a 	bcs.w	401c8e <__udivmoddi4+0x2c6>
  401b7a:	42ab      	cmp	r3, r5
  401b7c:	f240 8087 	bls.w	401c8e <__udivmoddi4+0x2c6>
  401b80:	3902      	subs	r1, #2
  401b82:	443d      	add	r5, r7
  401b84:	1aeb      	subs	r3, r5, r3
  401b86:	fa1f f588 	uxth.w	r5, r8
  401b8a:	fbb3 f0f2 	udiv	r0, r3, r2
  401b8e:	fb02 3310 	mls	r3, r2, r0, r3
  401b92:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
  401b96:	fb00 f30c 	mul.w	r3, r0, ip
  401b9a:	42ab      	cmp	r3, r5
  401b9c:	d907      	bls.n	401bae <__udivmoddi4+0x1e6>
  401b9e:	19ed      	adds	r5, r5, r7
  401ba0:	f100 38ff 	add.w	r8, r0, #4294967295
  401ba4:	d26f      	bcs.n	401c86 <__udivmoddi4+0x2be>
  401ba6:	42ab      	cmp	r3, r5
  401ba8:	d96d      	bls.n	401c86 <__udivmoddi4+0x2be>
  401baa:	3802      	subs	r0, #2
  401bac:	443d      	add	r5, r7
  401bae:	1aeb      	subs	r3, r5, r3
  401bb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
  401bb4:	e78f      	b.n	401ad6 <__udivmoddi4+0x10e>
  401bb6:	f1c1 0720 	rsb	r7, r1, #32
  401bba:	fa22 f807 	lsr.w	r8, r2, r7
  401bbe:	408b      	lsls	r3, r1
  401bc0:	fa05 f401 	lsl.w	r4, r5, r1
  401bc4:	ea48 0303 	orr.w	r3, r8, r3
  401bc8:	fa20 fe07 	lsr.w	lr, r0, r7
  401bcc:	ea4f 4c13 	mov.w	ip, r3, lsr #16
  401bd0:	40fd      	lsrs	r5, r7
  401bd2:	ea4e 0e04 	orr.w	lr, lr, r4
  401bd6:	fbb5 f9fc 	udiv	r9, r5, ip
  401bda:	ea4f 441e 	mov.w	r4, lr, lsr #16
  401bde:	fb0c 5519 	mls	r5, ip, r9, r5
  401be2:	fa1f f883 	uxth.w	r8, r3
  401be6:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
  401bea:	fb09 f408 	mul.w	r4, r9, r8
  401bee:	42ac      	cmp	r4, r5
  401bf0:	fa02 f201 	lsl.w	r2, r2, r1
  401bf4:	fa00 fa01 	lsl.w	sl, r0, r1
  401bf8:	d908      	bls.n	401c0c <__udivmoddi4+0x244>
  401bfa:	18ed      	adds	r5, r5, r3
  401bfc:	f109 30ff 	add.w	r0, r9, #4294967295
  401c00:	d243      	bcs.n	401c8a <__udivmoddi4+0x2c2>
  401c02:	42ac      	cmp	r4, r5
  401c04:	d941      	bls.n	401c8a <__udivmoddi4+0x2c2>
  401c06:	f1a9 0902 	sub.w	r9, r9, #2
  401c0a:	441d      	add	r5, r3
  401c0c:	1b2d      	subs	r5, r5, r4
  401c0e:	fa1f fe8e 	uxth.w	lr, lr
  401c12:	fbb5 f0fc 	udiv	r0, r5, ip
  401c16:	fb0c 5510 	mls	r5, ip, r0, r5
  401c1a:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
  401c1e:	fb00 f808 	mul.w	r8, r0, r8
  401c22:	45a0      	cmp	r8, r4
  401c24:	d907      	bls.n	401c36 <__udivmoddi4+0x26e>
  401c26:	18e4      	adds	r4, r4, r3
  401c28:	f100 35ff 	add.w	r5, r0, #4294967295
  401c2c:	d229      	bcs.n	401c82 <__udivmoddi4+0x2ba>
  401c2e:	45a0      	cmp	r8, r4
  401c30:	d927      	bls.n	401c82 <__udivmoddi4+0x2ba>
  401c32:	3802      	subs	r0, #2
  401c34:	441c      	add	r4, r3
  401c36:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
  401c3a:	eba4 0408 	sub.w	r4, r4, r8
  401c3e:	fba0 8902 	umull	r8, r9, r0, r2
  401c42:	454c      	cmp	r4, r9
  401c44:	46c6      	mov	lr, r8
  401c46:	464d      	mov	r5, r9
  401c48:	d315      	bcc.n	401c76 <__udivmoddi4+0x2ae>
  401c4a:	d012      	beq.n	401c72 <__udivmoddi4+0x2aa>
  401c4c:	b156      	cbz	r6, 401c64 <__udivmoddi4+0x29c>
  401c4e:	ebba 030e 	subs.w	r3, sl, lr
  401c52:	eb64 0405 	sbc.w	r4, r4, r5
  401c56:	fa04 f707 	lsl.w	r7, r4, r7
  401c5a:	40cb      	lsrs	r3, r1
  401c5c:	431f      	orrs	r7, r3
  401c5e:	40cc      	lsrs	r4, r1
  401c60:	6037      	str	r7, [r6, #0]
  401c62:	6074      	str	r4, [r6, #4]
  401c64:	2100      	movs	r1, #0
  401c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  401c6a:	4618      	mov	r0, r3
  401c6c:	e6f8      	b.n	401a60 <__udivmoddi4+0x98>
  401c6e:	4690      	mov	r8, r2
  401c70:	e6e0      	b.n	401a34 <__udivmoddi4+0x6c>
  401c72:	45c2      	cmp	sl, r8
  401c74:	d2ea      	bcs.n	401c4c <__udivmoddi4+0x284>
  401c76:	ebb8 0e02 	subs.w	lr, r8, r2
  401c7a:	eb69 0503 	sbc.w	r5, r9, r3
  401c7e:	3801      	subs	r0, #1
  401c80:	e7e4      	b.n	401c4c <__udivmoddi4+0x284>
  401c82:	4628      	mov	r0, r5
  401c84:	e7d7      	b.n	401c36 <__udivmoddi4+0x26e>
  401c86:	4640      	mov	r0, r8
  401c88:	e791      	b.n	401bae <__udivmoddi4+0x1e6>
  401c8a:	4681      	mov	r9, r0
  401c8c:	e7be      	b.n	401c0c <__udivmoddi4+0x244>
  401c8e:	4601      	mov	r1, r0
  401c90:	e778      	b.n	401b84 <__udivmoddi4+0x1bc>
  401c92:	3802      	subs	r0, #2
  401c94:	443c      	add	r4, r7
  401c96:	e745      	b.n	401b24 <__udivmoddi4+0x15c>
  401c98:	4608      	mov	r0, r1
  401c9a:	e708      	b.n	401aae <__udivmoddi4+0xe6>
  401c9c:	f1a8 0802 	sub.w	r8, r8, #2
  401ca0:	443d      	add	r5, r7
  401ca2:	e72b      	b.n	401afc <__udivmoddi4+0x134>

00401ca4 <__aeabi_idiv0>:
  401ca4:	4770      	bx	lr
  401ca6:	bf00      	nop

00401ca8 <__libc_init_array>:
  401ca8:	b570      	push	{r4, r5, r6, lr}
  401caa:	4e0f      	ldr	r6, [pc, #60]	; (401ce8 <__libc_init_array+0x40>)
  401cac:	4d0f      	ldr	r5, [pc, #60]	; (401cec <__libc_init_array+0x44>)
  401cae:	1b76      	subs	r6, r6, r5
  401cb0:	10b6      	asrs	r6, r6, #2
  401cb2:	bf18      	it	ne
  401cb4:	2400      	movne	r4, #0
  401cb6:	d005      	beq.n	401cc4 <__libc_init_array+0x1c>
  401cb8:	3401      	adds	r4, #1
  401cba:	f855 3b04 	ldr.w	r3, [r5], #4
  401cbe:	4798      	blx	r3
  401cc0:	42a6      	cmp	r6, r4
  401cc2:	d1f9      	bne.n	401cb8 <__libc_init_array+0x10>
  401cc4:	4e0a      	ldr	r6, [pc, #40]	; (401cf0 <__libc_init_array+0x48>)
  401cc6:	4d0b      	ldr	r5, [pc, #44]	; (401cf4 <__libc_init_array+0x4c>)
  401cc8:	1b76      	subs	r6, r6, r5
  401cca:	f000 f8bb 	bl	401e44 <_init>
  401cce:	10b6      	asrs	r6, r6, #2
  401cd0:	bf18      	it	ne
  401cd2:	2400      	movne	r4, #0
  401cd4:	d006      	beq.n	401ce4 <__libc_init_array+0x3c>
  401cd6:	3401      	adds	r4, #1
  401cd8:	f855 3b04 	ldr.w	r3, [r5], #4
  401cdc:	4798      	blx	r3
  401cde:	42a6      	cmp	r6, r4
  401ce0:	d1f9      	bne.n	401cd6 <__libc_init_array+0x2e>
  401ce2:	bd70      	pop	{r4, r5, r6, pc}
  401ce4:	bd70      	pop	{r4, r5, r6, pc}
  401ce6:	bf00      	nop
  401ce8:	00401e50 	.word	0x00401e50
  401cec:	00401e50 	.word	0x00401e50
  401cf0:	00401e58 	.word	0x00401e58
  401cf4:	00401e50 	.word	0x00401e50

00401cf8 <register_fini>:
  401cf8:	4b02      	ldr	r3, [pc, #8]	; (401d04 <register_fini+0xc>)
  401cfa:	b113      	cbz	r3, 401d02 <register_fini+0xa>
  401cfc:	4802      	ldr	r0, [pc, #8]	; (401d08 <register_fini+0x10>)
  401cfe:	f000 b805 	b.w	401d0c <atexit>
  401d02:	4770      	bx	lr
  401d04:	00000000 	.word	0x00000000
  401d08:	00401d19 	.word	0x00401d19

00401d0c <atexit>:
  401d0c:	2300      	movs	r3, #0
  401d0e:	4601      	mov	r1, r0
  401d10:	461a      	mov	r2, r3
  401d12:	4618      	mov	r0, r3
  401d14:	f000 b81e 	b.w	401d54 <__register_exitproc>

00401d18 <__libc_fini_array>:
  401d18:	b538      	push	{r3, r4, r5, lr}
  401d1a:	4c0a      	ldr	r4, [pc, #40]	; (401d44 <__libc_fini_array+0x2c>)
  401d1c:	4d0a      	ldr	r5, [pc, #40]	; (401d48 <__libc_fini_array+0x30>)
  401d1e:	1b64      	subs	r4, r4, r5
  401d20:	10a4      	asrs	r4, r4, #2
  401d22:	d00a      	beq.n	401d3a <__libc_fini_array+0x22>
  401d24:	f104 4380 	add.w	r3, r4, #1073741824	; 0x40000000
  401d28:	3b01      	subs	r3, #1
  401d2a:	eb05 0583 	add.w	r5, r5, r3, lsl #2
  401d2e:	3c01      	subs	r4, #1
  401d30:	f855 3904 	ldr.w	r3, [r5], #-4
  401d34:	4798      	blx	r3
  401d36:	2c00      	cmp	r4, #0
  401d38:	d1f9      	bne.n	401d2e <__libc_fini_array+0x16>
  401d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  401d3e:	f000 b88b 	b.w	401e58 <_fini>
  401d42:	bf00      	nop
  401d44:	00401e68 	.word	0x00401e68
  401d48:	00401e64 	.word	0x00401e64

00401d4c <__retarget_lock_acquire_recursive>:
  401d4c:	4770      	bx	lr
  401d4e:	bf00      	nop

00401d50 <__retarget_lock_release_recursive>:
  401d50:	4770      	bx	lr
  401d52:	bf00      	nop

00401d54 <__register_exitproc>:
  401d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  401d58:	4d2c      	ldr	r5, [pc, #176]	; (401e0c <__register_exitproc+0xb8>)
  401d5a:	4606      	mov	r6, r0
  401d5c:	6828      	ldr	r0, [r5, #0]
  401d5e:	4698      	mov	r8, r3
  401d60:	460f      	mov	r7, r1
  401d62:	4691      	mov	r9, r2
  401d64:	f7ff fff2 	bl	401d4c <__retarget_lock_acquire_recursive>
  401d68:	4b29      	ldr	r3, [pc, #164]	; (401e10 <__register_exitproc+0xbc>)
  401d6a:	681c      	ldr	r4, [r3, #0]
  401d6c:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
  401d70:	2b00      	cmp	r3, #0
  401d72:	d03e      	beq.n	401df2 <__register_exitproc+0x9e>
  401d74:	685a      	ldr	r2, [r3, #4]
  401d76:	2a1f      	cmp	r2, #31
  401d78:	dc1c      	bgt.n	401db4 <__register_exitproc+0x60>
  401d7a:	f102 0e01 	add.w	lr, r2, #1
  401d7e:	b176      	cbz	r6, 401d9e <__register_exitproc+0x4a>
  401d80:	eb03 0182 	add.w	r1, r3, r2, lsl #2
  401d84:	2401      	movs	r4, #1
  401d86:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
  401d8a:	f8d3 0188 	ldr.w	r0, [r3, #392]	; 0x188
  401d8e:	4094      	lsls	r4, r2
  401d90:	4320      	orrs	r0, r4
  401d92:	2e02      	cmp	r6, #2
  401d94:	f8c3 0188 	str.w	r0, [r3, #392]	; 0x188
  401d98:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
  401d9c:	d023      	beq.n	401de6 <__register_exitproc+0x92>
  401d9e:	3202      	adds	r2, #2
  401da0:	f8c3 e004 	str.w	lr, [r3, #4]
  401da4:	6828      	ldr	r0, [r5, #0]
  401da6:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
  401daa:	f7ff ffd1 	bl	401d50 <__retarget_lock_release_recursive>
  401dae:	2000      	movs	r0, #0
  401db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401db4:	4b17      	ldr	r3, [pc, #92]	; (401e14 <__register_exitproc+0xc0>)
  401db6:	b30b      	cbz	r3, 401dfc <__register_exitproc+0xa8>
  401db8:	f44f 70c8 	mov.w	r0, #400	; 0x190
  401dbc:	f3af 8000 	nop.w
  401dc0:	4603      	mov	r3, r0
  401dc2:	b1d8      	cbz	r0, 401dfc <__register_exitproc+0xa8>
  401dc4:	f8d4 2148 	ldr.w	r2, [r4, #328]	; 0x148
  401dc8:	6002      	str	r2, [r0, #0]
  401dca:	2100      	movs	r1, #0
  401dcc:	6041      	str	r1, [r0, #4]
  401dce:	460a      	mov	r2, r1
  401dd0:	f8c4 0148 	str.w	r0, [r4, #328]	; 0x148
  401dd4:	f04f 0e01 	mov.w	lr, #1
  401dd8:	f8c0 1188 	str.w	r1, [r0, #392]	; 0x188
  401ddc:	f8c0 118c 	str.w	r1, [r0, #396]	; 0x18c
  401de0:	2e00      	cmp	r6, #0
  401de2:	d0dc      	beq.n	401d9e <__register_exitproc+0x4a>
  401de4:	e7cc      	b.n	401d80 <__register_exitproc+0x2c>
  401de6:	f8d3 118c 	ldr.w	r1, [r3, #396]	; 0x18c
  401dea:	430c      	orrs	r4, r1
  401dec:	f8c3 418c 	str.w	r4, [r3, #396]	; 0x18c
  401df0:	e7d5      	b.n	401d9e <__register_exitproc+0x4a>
  401df2:	f504 73a6 	add.w	r3, r4, #332	; 0x14c
  401df6:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
  401dfa:	e7bb      	b.n	401d74 <__register_exitproc+0x20>
  401dfc:	6828      	ldr	r0, [r5, #0]
  401dfe:	f7ff ffa7 	bl	401d50 <__retarget_lock_release_recursive>
  401e02:	f04f 30ff 	mov.w	r0, #4294967295
  401e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  401e0a:	bf00      	nop
  401e0c:	20400ec0 	.word	0x20400ec0
  401e10:	00401e40 	.word	0x00401e40
  401e14:	00000000 	.word	0x00000000
  401e18:	6972614d 	.word	0x6972614d
  401e1c:	614d206f 	.word	0x614d206f
  401e20:	00006e69 	.word	0x00006e69
  401e24:	65646e55 	.word	0x65646e55
  401e28:	726f7772 	.word	0x726f7772
  401e2c:	4d20646c 	.word	0x4d20646c
  401e30:	6f697261 	.word	0x6f697261
  401e34:	00000000 	.word	0x00000000
  401e38:	61726950 	.word	0x61726950
  401e3c:	00736574 	.word	0x00736574

00401e40 <_global_impure_ptr>:
  401e40:	20400a98                                ..@ 

00401e44 <_init>:
  401e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e46:	bf00      	nop
  401e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401e4a:	bc08      	pop	{r3}
  401e4c:	469e      	mov	lr, r3
  401e4e:	4770      	bx	lr

00401e50 <__init_array_start>:
  401e50:	00401cf9 	.word	0x00401cf9

00401e54 <__frame_dummy_init_array_entry>:
  401e54:	00400165                                e.@.

00401e58 <_fini>:
  401e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  401e5a:	bf00      	nop
  401e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
  401e5e:	bc08      	pop	{r3}
  401e60:	469e      	mov	lr, r3
  401e62:	4770      	bx	lr

00401e64 <__fini_array_start>:
  401e64:	00400141 	.word	0x00400141

Disassembly of section .relocate:

20400000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20400000:	f3bf 8f5f 	dmb	sy
20400004:	3801      	subs	r0, #1
20400006:	d1fb      	bne.n	20400000 <portable_delay_cycles>
20400008:	4770      	bx	lr

2040000a <g_interrupt_enabled>:
2040000a:	0001                                        ..

2040000c <SystemCoreClock>:
2040000c:	0900 003d                                   ..=.

20400010 <melody>:
20400010:	0a4d 0000 0a4d 0000 0000 0000 0a4d 0000     M...M.......M...
20400020:	0000 0000 082d 0000 0a4d 0000 0000 0000     ....-...M.......
20400030:	0c40 0000 0000 0000 0000 0000 0000 0000     @...............
20400040:	0620 0000 0000 0000 0000 0000 0000 0000      ...............
20400050:	082d 0000 0000 0000 0000 0000 0620 0000     -........... ...
	...
20400068:	0527 0000 0000 0000 0000 0000 06e0 0000     '...............
20400078:	0000 0000 07b8 0000 0000 0000 0749 0000     ............I...
20400088:	06e0 0000 0000 0000 0620 0000 0a4d 0000     ........ ...M...
20400098:	0c40 0000 0dc0 0000 0000 0000 0aea 0000     @...............
204000a8:	0c40 0000 0000 0000 0a4d 0000 0000 0000     @.......M.......
204000b8:	082d 0000 092d 0000 07b8 0000 0000 0000     -...-...........
204000c8:	0000 0000 082d 0000 0000 0000 0000 0000     ....-...........
204000d8:	0620 0000 0000 0000 0000 0000 0527 0000      ...........'...
	...
204000f0:	06e0 0000 0000 0000 07b8 0000 0000 0000     ................
20400100:	0749 0000 06e0 0000 0000 0000 0620 0000     I........... ...
20400110:	0a4d 0000 0c40 0000 0dc0 0000 0000 0000     M...@...........
20400120:	0aea 0000 0c40 0000 0000 0000 0a4d 0000     ....@.......M...
20400130:	0000 0000 082d 0000 092d 0000 07b8 0000     ....-...-.......
	...

20400148 <pirate_notes>:
20400148:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
20400158:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
20400168:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
20400178:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
20400188:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400198:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
204001a8:	01b8 0000 01ee 0000 020b 0000 020b 0000     ................
204001b8:	0000 0000 020b 0000 024b 0000 01ee 0000     ........K.......
204001c8:	01ee 0000 0000 0000 01b8 0000 0188 0000     ................
204001d8:	01b8 0000 0000 0000 014a 0000 0188 0000     ........J.......
204001e8:	01b8 0000 01b8 0000 0000 0000 01b8 0000     ................
204001f8:	020b 0000 024b 0000 024b 0000 0000 0000     ....K...K.......
20400208:	024b 0000 0293 0000 02ba 0000 02ba 0000     K...............
20400218:	0000 0000 0293 0000 024b 0000 0293 0000     ........K.......
20400228:	01b8 0000 0000 0000 01b8 0000 01ee 0000     ................
20400238:	020b 0000 020b 0000 0000 0000 024b 0000     ............K...
20400248:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400258:	020b 0000 01ee 0000 01ee 0000 0000 0000     ................
20400268:	020b 0000 01b8 0000 01ee 0000 0000 0000     ................
20400278:	01b8 0000 01b8 0000 01b8 0000 01ee 0000     ................
20400288:	020b 0000 020b 0000 0000 0000 020b 0000     ................
20400298:	024b 0000 01ee 0000 01ee 0000 0000 0000     K...............
204002a8:	01b8 0000 0188 0000 01b8 0000 0000 0000     ................
204002b8:	014a 0000 0188 0000 01b8 0000 01b8 0000     J...............
204002c8:	0000 0000 01b8 0000 01ee 0000 020b 0000     ................
204002d8:	020b 0000 0000 0000 020b 0000 024b 0000     ............K...
204002e8:	01ee 0000 01ee 0000 0000 0000 01b8 0000     ................
204002f8:	0188 0000 01b8 0000 0000 0000 014a 0000     ............J...
20400308:	0188 0000 01b8 0000 01b8 0000 0000 0000     ................
20400318:	01b8 0000 020b 0000 024b 0000 024b 0000     ........K...K...
20400328:	0000 0000 024b 0000 0293 0000 02ba 0000     ....K...........
20400338:	02ba 0000 0000 0000 0293 0000 024b 0000     ............K...
20400348:	0293 0000 01b8 0000 0000 0000 01b8 0000     ................
20400358:	01ee 0000 020b 0000 020b 0000 0000 0000     ................
20400368:	024b 0000 0293 0000 01b8 0000 0000 0000     K...............
20400378:	01b8 0000 020b 0000 01ee 0000 01ee 0000     ................
20400388:	0000 0000 020b 0000 01b8 0000 01ee 0000     ................
20400398:	0000 0000 0293 0000 0000 0000 0000 0000     ................
204003a8:	02ba 0000 0000 0000 0000 0000 0293 0000     ................
204003b8:	0293 0000 0000 0000 0310 0000 0000 0000     ................
204003c8:	0293 0000 024b 0000 0000 0000 0000 0000     ....K...........
204003d8:	024b 0000 0000 0000 0000 0000 020b 0000     K...............
	...
204003f0:	01ee 0000 020b 0000 0000 0000 01ee 0000     ................
20400400:	0000 0000 01b8 0000 0293 0000 0000 0000     ................
20400410:	0000 0000 02ba 0000 0000 0000 0000 0000     ................
20400420:	0293 0000 0293 0000 0000 0000 0310 0000     ................
20400430:	0000 0000 0293 0000 024b 0000 0000 0000     ........K.......
20400440:	0000 0000 024b 0000 0000 0000 0000 0000     ....K...........
20400450:	020b 0000 0000 0000 0000 0000 01ee 0000     ................
20400460:	020b 0000 0000 0000 01ee 0000 0000 0000     ................
20400470:	01b8 0000                                   ....

20400474 <pirate_tempo>:
20400474:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400484:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400494:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204004a4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204004b4:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
204004c4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204004d4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204004e4:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
204004f4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400504:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400514:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400524:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400534:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400544:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400554:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400564:	00fa 0000 007d 0000 007d 0000 00fa 0000     ....}...}.......
20400574:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400584:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400594:	007d 0000 007d 0000 0177 0000 0177 0000     }...}...w...w...
204005a4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204005b4:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
204005c4:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
204005d4:	007d 0000 007d 0000 0177 0000 007d 0000     }...}...w...}...
204005e4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204005f4:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400604:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400614:	00fa 0000 007d 0000 007d 0000 007d 0000     ....}...}...}...
20400624:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400634:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400644:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
20400654:	007d 0000 007d 0000 007d 0000 00fa 0000     }...}...}.......
20400664:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400674:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400684:	007d 0000 00fa 0000 007d 0000 007d 0000     }.......}...}...
20400694:	00fa 0000 007d 0000 00fa 0000 007d 0000     ....}.......}...
204006a4:	007d 0000 007d 0000 00fa 0000 007d 0000     }...}.......}...
204006b4:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
204006c4:	0177 0000 00fa 0000 007d 0000 0177 0000     w.......}...w...
204006d4:	00fa 0000 007d 0000 0177 0000 007d 0000     ....}...w...}...
204006e4:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
204006f4:	007d 0000 007d 0000 007d 0000 0177 0000     }...}...}...w...
20400704:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
20400714:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400724:	007d 0000 007d 0000 007d 0000 01f4 0000     }...}...}.......
20400734:	00fa 0000 007d 0000 0177 0000 00fa 0000     ....}...w.......
20400744:	007d 0000 0177 0000 007d 0000 007d 0000     }...w...}...}...
20400754:	007d 0000 007d 0000 007d 0000 007d 0000     }...}...}...}...
20400764:	007d 0000 007d 0000 0177 0000 00fa 0000     }...}...w.......
20400774:	007d 0000 0177 0000 00fa 0000 007d 0000     }...w.......}...
20400784:	0177 0000 007d 0000 007d 0000 007d 0000     w...}...}...}...
20400794:	007d 0000 007d 0000 01f4 0000               }...}.......

204007a0 <tempo>:
204007a0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204007b0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204007c0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204007d0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204007e0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204007f0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400800:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400810:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400820:	0009 0000 0009 0000 0009 0000 000c 0000     ................
20400830:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400840:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400850:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400860:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400870:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400880:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400890:	000c 0000 000c 0000 000c 0000 0009 0000     ................
204008a0:	0009 0000 0009 0000 000c 0000 000c 0000     ................
204008b0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008c0:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204008d0:	000c 0000 000c 0000                         ........

204008d8 <underworld_melody>:
204008d8:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
204008e8:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
204008f8:	0106 0000 020b 0000 00dc 0000 01b8 0000     ................
20400908:	00e9 0000 01d2 0000 0000 0000 0000 0000     ................
20400918:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
20400928:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
20400938:	00af 0000 015d 0000 0093 0000 0126 0000     ....].......&...
20400948:	009c 0000 0137 0000 0000 0000 0000 0000     ....7...........
20400958:	0137 0000 0115 0000 0126 0000 0115 0000     7.......&.......
20400968:	0137 0000 0137 0000 00d0 0000 00c4 0000     7...7...........
20400978:	0115 0000 0106 0000 0172 0000 015d 0000     ........r...]...
20400988:	00a5 0000 01d2 0000 01b8 0000 019f 0000     ................
20400998:	0137 0000 00f7 0000 00e9 0000 00dc 0000     7...............
204009a8:	00d0 0000 0000 0000 0000 0000 0000 0000     ................

204009b8 <underworld_tempo>:
204009b8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204009c8:	000c 0000 000c 0000 0006 0000 0003 0000     ................
204009d8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
204009e8:	000c 0000 000c 0000 0006 0000 0003 0000     ................
204009f8:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400a08:	000c 0000 000c 0000 0006 0000 0003 0000     ................
20400a18:	000c 0000 000c 0000 000c 0000 000c 0000     ................
20400a28:	000c 0000 000c 0000 0006 0000 0006 0000     ................
20400a38:	0012 0000 0012 0000 0012 0000 0006 0000     ................
20400a48:	0006 0000 0006 0000 0006 0000 0006 0000     ................
20400a58:	0006 0000 0012 0000 0012 0000 0012 0000     ................
20400a68:	0012 0000 0012 0000 0012 0000 000a 0000     ................
20400a78:	000a 0000 000a 0000 000a 0000 000a 0000     ................
20400a88:	000a 0000 0003 0000 0003 0000 0003 0000     ................

20400a98 <impure_data>:
20400a98:	0000 0000 0d84 2040 0dec 2040 0e54 2040     ......@ ..@ T.@ 
	...
20400b40:	0001 0000 0000 0000 330e abcd 1234 e66d     .........3..4.m.
20400b50:	deec 0005 000b 0000 0000 0000 0000 0000     ................
	...

20400ec0 <__atexit_recursive_mutex>:
20400ec0:	0f60 2040                                   `.@ 
